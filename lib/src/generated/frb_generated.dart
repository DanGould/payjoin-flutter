// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/io.dart';
import 'api/receive.dart';
import 'api/send.dart';
import 'api/uri.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'utils/error.dart';
import 'utils/types.dart';

/// Main entrypoint of the Rust API
class core extends BaseEntrypoint<coreApi, coreApiImpl, coreWire> {
  @internal
  static final instance = core._();

  core._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    coreApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<coreApiImpl, coreWire> get apiImplConstructor =>
      coreApiImpl.new;

  @override
  WireConstructor<coreWire> get wireConstructor => coreWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0';

  @override
  int get rustContentHash => -486461789;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'payjoin_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class coreApi extends BaseApi {
  Future<FfiOhttpKeys> crateApiIoFetchOhttpKeys(
      {required FfiUrl ohttpRelay, required FfiUrl payjoinDirectory});

  Future<(Request, ClientResponse)> crateApiReceiveFfiActiveSessionExtractReq(
      {required FfiActiveSession that});

  FfiPjUriBuilder crateApiReceiveFfiActiveSessionPjUriBuilder(
      {required FfiActiveSession that});

  Future<FfiUrl> crateApiReceiveFfiActiveSessionPjUrl(
      {required FfiActiveSession that});

  Future<FfiV2UncheckedProposal?> crateApiReceiveFfiActiveSessionProcessRes(
      {required FfiActiveSession that,
      required List<int> body,
      required ClientResponse ctx});

  String crateApiReceiveFfiActiveSessionPublicKey(
      {required FfiActiveSession that});

  Future<FfiMaybeMixedInputScripts>
      crateApiReceiveFfiMaybeInputsOwnedCheckInputsNotOwned(
          {required FfiMaybeInputsOwned that,
          required FutureOr<bool> Function(Uint8List) isOwned});

  Future<FfiOutputsUnknown>
      crateApiReceiveFfiMaybeInputsSeenCheckNoInputsSeenBefore(
          {required FfiMaybeInputsSeen that,
          required FutureOr<bool> Function(OutPoint) isKnown});

  Future<FfiMaybeInputsSeen>
      crateApiReceiveFfiMaybeMixedInputScriptsCheckNoMixedInputScripts(
          {required FfiMaybeMixedInputScripts that});

  Future<FfiProvisionalProposal>
      crateApiReceiveFfiOutputsUnknownIdentifyReceiverOutputs(
          {required FfiOutputsUnknown that,
          required FutureOr<bool> Function(Uint8List) isReceiverOutput});

  Future<bool> crateApiReceiveFfiPayjoinProposalIsOutputSubstitutionDisabled(
      {required FfiPayjoinProposal that});

  Future<Uint64List> crateApiReceiveFfiPayjoinProposalOwnedVouts(
      {required FfiPayjoinProposal that});

  Future<String> crateApiReceiveFfiPayjoinProposalPsbt(
      {required FfiPayjoinProposal that});

  Future<List<OutPoint>> crateApiReceiveFfiPayjoinProposalUtxosToBeLocked(
      {required FfiPayjoinProposal that});

  Future<void> crateApiReceiveFfiProvisionalProposalContributeWitnessInput(
      {required FfiProvisionalProposal that,
      required TxOut txo,
      required OutPoint outpoint});

  Future<FfiPayjoinProposal>
      crateApiReceiveFfiProvisionalProposalFinalizeProposal(
          {required FfiProvisionalProposal that,
          required FutureOr<String> Function(String) processPsbt,
          BigInt? minFeeRateSatPerVb});

  Future<OutPoint> crateApiReceiveFfiProvisionalProposalTryPreservingPrivacy(
      {required FfiProvisionalProposal that,
      required Map<BigInt, OutPoint> candidateInputs});

  Future<void> crateApiReceiveFfiProvisionalProposalTrySubstituteReceiverOutput(
      {required FfiProvisionalProposal that,
      required FutureOr<Uint8List> Function() generateScript});

  Future<(Request, ClientResponse)>
      crateApiReceiveFfiSessionInitializerExtractReq(
          {required FfiSessionInitializer that});

  Future<FfiSessionInitializer> crateApiReceiveFfiSessionInitializerNew(
      {required String address,
      BigInt? expireAfter,
      required Network network,
      required FfiUrl directory,
      required FfiOhttpKeys ohttpKeys,
      required FfiUrl ohttpRelay});

  Future<FfiActiveSession> crateApiReceiveFfiSessionInitializerProcessRes(
      {required FfiSessionInitializer that,
      required List<int> body,
      required ClientResponse ctx});

  Future<FfiMaybeInputsOwned>
      crateApiReceiveFfiUncheckedProposalAssumeInteractiveReceiver(
          {required FfiUncheckedProposal that});

  Future<FfiMaybeInputsOwned>
      crateApiReceiveFfiUncheckedProposalCheckBroadcastSuitability(
          {required FfiUncheckedProposal that,
          BigInt? minFeeRate,
          required FutureOr<bool> Function(Uint8List) canBroadcast});

  Future<Uint8List>
      crateApiReceiveFfiUncheckedProposalExtractTxToScheduleBroadcast(
          {required FfiUncheckedProposal that});

  Future<FfiUncheckedProposal> crateApiReceiveFfiUncheckedProposalFromRequest(
      {required List<int> body,
      required String query,
      required Headers headers});

  Future<FfiV2MaybeMixedInputScripts>
      crateApiReceiveFfiV2MaybeInputsOwnedCheckInputsNotOwned(
          {required FfiV2MaybeInputsOwned that,
          required FutureOr<bool> Function(Uint8List) isOwned});

  Future<FfiV2OutputsUnknown>
      crateApiReceiveFfiV2MaybeInputsSeenCheckNoInputsSeenBefore(
          {required FfiV2MaybeInputsSeen that,
          required FutureOr<bool> Function(OutPoint) isKnown});

  Future<FfiV2MaybeInputsSeen>
      crateApiReceiveFfiV2MaybeMixedInputScriptsCheckNoMixedInputScripts(
          {required FfiV2MaybeMixedInputScripts that});

  Future<FfiV2ProvisionalProposal>
      crateApiReceiveFfiV2OutputsUnknownIdentifyReceiverOutputs(
          {required FfiV2OutputsUnknown that,
          required FutureOr<bool> Function(Uint8List) isReceiverOutput});

  Future<String> crateApiReceiveFfiV2PayjoinProposalExtractV1Req(
      {required FfiV2PayjoinProposal that});

  Future<(Request, ClientResponse)>
      crateApiReceiveFfiV2PayjoinProposalExtractV2Req(
          {required FfiV2PayjoinProposal that});

  Future<bool> crateApiReceiveFfiV2PayjoinProposalIsOutputSubstitutionDisabled(
      {required FfiV2PayjoinProposal that});

  Future<Uint64List> crateApiReceiveFfiV2PayjoinProposalOwnedVouts(
      {required FfiV2PayjoinProposal that});

  Future<void> crateApiReceiveFfiV2PayjoinProposalProcessRes(
      {required FfiV2PayjoinProposal that,
      required List<int> res,
      required ClientResponse ohttpContext});

  Future<String> crateApiReceiveFfiV2PayjoinProposalPsbt(
      {required FfiV2PayjoinProposal that});

  Future<List<OutPoint>> crateApiReceiveFfiV2PayjoinProposalUtxosToBeLocked(
      {required FfiV2PayjoinProposal that});

  Future<void> crateApiReceiveFfiV2ProvisionalProposalContributeWitnessInput(
      {required FfiV2ProvisionalProposal that,
      required TxOut txo,
      required OutPoint outpoint});

  Future<FfiV2PayjoinProposal>
      crateApiReceiveFfiV2ProvisionalProposalFinalizeProposal(
          {required FfiV2ProvisionalProposal that,
          required FutureOr<String> Function(String) processPsbt,
          BigInt? minFeeRateSatPerVb});

  Future<bool>
      crateApiReceiveFfiV2ProvisionalProposalIsOutputSubstitutionDisabled(
          {required FfiV2ProvisionalProposal that});

  Future<OutPoint> crateApiReceiveFfiV2ProvisionalProposalTryPreservingPrivacy(
      {required FfiV2ProvisionalProposal that,
      required Map<BigInt, OutPoint> candidateInputs});

  Future<void>
      crateApiReceiveFfiV2ProvisionalProposalTrySubstituteReceiverOutput(
          {required FfiV2ProvisionalProposal that,
          required FutureOr<Uint8List> Function() generateScript});

  Future<FfiV2MaybeInputsOwned>
      crateApiReceiveFfiV2UncheckedProposalAssumeInteractiveReceiver(
          {required FfiV2UncheckedProposal that});

  Future<FfiV2MaybeInputsOwned>
      crateApiReceiveFfiV2UncheckedProposalCheckBroadcastSuitability(
          {required FfiV2UncheckedProposal that,
          BigInt? minFeeRate,
          required FutureOr<bool> Function(Uint8List) canBroadcast});

  Future<Uint8List>
      crateApiReceiveFfiV2UncheckedProposalExtractTxToScheduleBroadcast(
          {required FfiV2UncheckedProposal that});

  Future<String> crateApiSendFfiContextV1ProcessResponse(
      {required FfiContextV1 that, required List<int> response});

  Future<String?> crateApiSendFfiContextV2ProcessResponse(
      {required FfiContextV2 that, required List<int> response});

  Future<FfiRequestBuilder>
      crateApiSendFfiRequestBuilderAlwaysDisableOutputSubstitution(
          {required FfiRequestBuilder that, required bool disable});

  Future<FfiRequestContext> crateApiSendFfiRequestBuilderBuildNonIncentivizing(
      {required FfiRequestBuilder that, required BigInt minFeeRate});

  Future<FfiRequestContext> crateApiSendFfiRequestBuilderBuildRecommended(
      {required FfiRequestBuilder that, required BigInt minFeeRate});

  Future<FfiRequestContext> crateApiSendFfiRequestBuilderBuildWithAdditionalFee(
      {required FfiRequestBuilder that,
      required BigInt maxFeeContribution,
      int? changeIndex,
      required BigInt minFeeRate,
      required bool clampFeeContribution});

  Future<FfiRequestBuilder> crateApiSendFfiRequestBuilderFromPsbtAndUri(
      {required String psbtBase64, required FfiPjUri pjUri});

  Future<(Request, FfiContextV1)> crateApiSendFfiRequestContextExtractV1(
      {required FfiRequestContext that});

  Future<(Request, FfiContextV2)> crateApiSendFfiRequestContextExtractV2(
      {required FfiRequestContext that, required FfiUrl ohttpProxyUrl});

  Future<FfiOhttpKeys> crateApiUriFfiOhttpKeysDecode(
      {required List<int> bytes});

  String crateApiUriFfiPjUriAddress({required FfiPjUri that});

  double? crateApiUriFfiPjUriAmount({required FfiPjUri that});

  String crateApiUriFfiPjUriAsString({required FfiPjUri that});

  FfiPjUriBuilder crateApiUriFfiPjUriBuilderAmount(
      {required FfiPjUriBuilder that, required BigInt amount});

  FfiPjUri crateApiUriFfiPjUriBuilderBuild({required FfiPjUriBuilder that});

  Future<FfiPjUriBuilder> crateApiUriFfiPjUriBuilderCreate(
      {required String address,
      required FfiUrl pj,
      FfiOhttpKeys? ohttpKeys,
      BigInt? expiry});

  FfiPjUriBuilder crateApiUriFfiPjUriBuilderLabel(
      {required FfiPjUriBuilder that, required String label});

  FfiPjUriBuilder crateApiUriFfiPjUriBuilderMessage(
      {required FfiPjUriBuilder that, required String message});

  FfiPjUriBuilder crateApiUriFfiPjUriBuilderPjos(
      {required FfiPjUriBuilder that, required bool pjos});

  String crateApiUriFfiUriAddress({required FfiUri that});

  double? crateApiUriFfiUriAmount({required FfiUri that});

  String crateApiUriFfiUriAsString({required FfiUri that});

  FfiPjUri crateApiUriFfiUriCheckPjSupported({required FfiUri that});

  FfiUri crateApiUriFfiUriFromStr({required String uri});

  String crateApiUriFfiUrlAsString({required FfiUrl that});

  FfiUrl crateApiUriFfiUrlFromStr({required String url});

  String? crateApiUriFfiUrlQuery({required FfiUrl that});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcV2PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcV2PayjoinProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcV2PayjoinProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcContextV1;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcContextV1;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcContextV1Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcContextV2;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcContextV2;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ArcContextV2Ptr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeInputsOwned;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MaybeInputsOwnedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeInputsSeen;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MaybeInputsSeenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeMixedInputScripts;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeMixedInputScripts;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MaybeMixedInputScriptsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OutputsUnknown;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_OutputsUnknownPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_PayjoinProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProvisionalProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ProvisionalProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UncheckedProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_UncheckedProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ActiveSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ActiveSession;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ActiveSessionPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SessionInitializer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SessionInitializer;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_SessionInitializerPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2MaybeInputsOwned;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_V2MaybeInputsOwnedPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2MaybeInputsSeen;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_V2MaybeInputsSeenPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2MaybeMixedInputScripts;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2MaybeMixedInputScripts;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_V2MaybeMixedInputScriptsPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2OutputsUnknown;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_V2OutputsUnknownPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2ProvisionalProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_V2ProvisionalProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2UncheckedProposal;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_V2UncheckedProposalPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RequestBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RequestBuilder;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RequestBuilderPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RequestContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RequestContext;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_RequestContextPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OhttpKeys;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OhttpKeys;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_OhttpKeysPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PjUri;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PjUri;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PjUriPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PjUriBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PjUriBuilder;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PjUriBuilderPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Uri;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Uri;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UriPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Url;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Url;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_UrlPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexOptionClientResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexOptionClientResponse;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexOptionClientResponsePtr;
}

class coreApiImpl extends coreApiImplPlatform implements coreApi {
  coreApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<FfiOhttpKeys> crateApiIoFetchOhttpKeys(
      {required FfiUrl ohttpRelay, required FfiUrl payjoinDirectory}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_url(ohttpRelay);
        var arg1 = cst_encode_box_autoadd_ffi_url(payjoinDirectory);
        return wire.wire__crate__api__io__fetch_ohttp_keys(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_ohttp_keys,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiIoFetchOhttpKeysConstMeta,
      argValues: [ohttpRelay, payjoinDirectory],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiIoFetchOhttpKeysConstMeta => const TaskConstMeta(
        debugName: "fetch_ohttp_keys",
        argNames: ["ohttpRelay", "payjoinDirectory"],
      );

  @override
  Future<(Request, ClientResponse)> crateApiReceiveFfiActiveSessionExtractReq(
      {required FfiActiveSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_active_session(that);
        return wire.wire__crate__api__receive__ffi_active_session_extract_req(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_client_response,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiReceiveFfiActiveSessionExtractReqConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiActiveSessionExtractReqConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_active_session_extract_req",
        argNames: ["that"],
      );

  @override
  FfiPjUriBuilder crateApiReceiveFfiActiveSessionPjUriBuilder(
      {required FfiActiveSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_active_session(that);
        return wire
            .wire__crate__api__receive__ffi_active_session_pj_uri_builder(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri_builder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiActiveSessionPjUriBuilderConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiActiveSessionPjUriBuilderConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_active_session_pj_uri_builder",
        argNames: ["that"],
      );

  @override
  Future<FfiUrl> crateApiReceiveFfiActiveSessionPjUrl(
      {required FfiActiveSession that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_active_session(that);
        return wire.wire__crate__api__receive__ffi_active_session_pj_url(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_url,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiActiveSessionPjUrlConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiActiveSessionPjUrlConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_active_session_pj_url",
        argNames: ["that"],
      );

  @override
  Future<FfiV2UncheckedProposal?> crateApiReceiveFfiActiveSessionProcessRes(
      {required FfiActiveSession that,
      required List<int> body,
      required ClientResponse ctx}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_active_session(that);
        var arg1 = cst_encode_list_prim_u_8_loose(body);
        var arg2 = cst_encode_box_autoadd_client_response(ctx);
        return wire.wire__crate__api__receive__ffi_active_session_process_res(
            port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData:
            dco_decode_opt_box_autoadd_ffi_v_2_unchecked_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiReceiveFfiActiveSessionProcessResConstMeta,
      argValues: [that, body, ctx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiActiveSessionProcessResConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_active_session_process_res",
        argNames: ["that", "body", "ctx"],
      );

  @override
  String crateApiReceiveFfiActiveSessionPublicKey(
      {required FfiActiveSession that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_active_session(that);
        return wire
            .wire__crate__api__receive__ffi_active_session_public_key(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiActiveSessionPublicKeyConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiActiveSessionPublicKeyConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_active_session_public_key",
        argNames: ["that"],
      );

  @override
  Future<FfiMaybeMixedInputScripts>
      crateApiReceiveFfiMaybeInputsOwnedCheckInputsNotOwned(
          {required FfiMaybeInputsOwned that,
          required FutureOr<bool> Function(Uint8List) isOwned}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_maybe_inputs_owned(that);
        var arg1 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                isOwned);
        return wire
            .wire__crate__api__receive__ffi_maybe_inputs_owned_check_inputs_not_owned(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_maybe_mixed_input_scripts,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiMaybeInputsOwnedCheckInputsNotOwnedConstMeta,
      argValues: [that, isOwned],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiMaybeInputsOwnedCheckInputsNotOwnedConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_maybe_inputs_owned_check_inputs_not_owned",
            argNames: ["that", "isOwned"],
          );

  @override
  Future<FfiOutputsUnknown>
      crateApiReceiveFfiMaybeInputsSeenCheckNoInputsSeenBefore(
          {required FfiMaybeInputsSeen that,
          required FutureOr<bool> Function(OutPoint) isKnown}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_maybe_inputs_seen(that);
        var arg1 =
            cst_encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
                isKnown);
        return wire
            .wire__crate__api__receive__ffi_maybe_inputs_seen_check_no_inputs_seen_before(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_outputs_unknown,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiMaybeInputsSeenCheckNoInputsSeenBeforeConstMeta,
      argValues: [that, isKnown],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiMaybeInputsSeenCheckNoInputsSeenBeforeConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_maybe_inputs_seen_check_no_inputs_seen_before",
            argNames: ["that", "isKnown"],
          );

  @override
  Future<FfiMaybeInputsSeen>
      crateApiReceiveFfiMaybeMixedInputScriptsCheckNoMixedInputScripts(
          {required FfiMaybeMixedInputScripts that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_maybe_mixed_input_scripts(that);
        return wire
            .wire__crate__api__receive__ffi_maybe_mixed_input_scripts_check_no_mixed_input_scripts(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_maybe_inputs_seen,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiMaybeMixedInputScriptsCheckNoMixedInputScriptsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiMaybeMixedInputScriptsCheckNoMixedInputScriptsConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_maybe_mixed_input_scripts_check_no_mixed_input_scripts",
            argNames: ["that"],
          );

  @override
  Future<FfiProvisionalProposal>
      crateApiReceiveFfiOutputsUnknownIdentifyReceiverOutputs(
          {required FfiOutputsUnknown that,
          required FutureOr<bool> Function(Uint8List) isReceiverOutput}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_outputs_unknown(that);
        var arg1 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                isReceiverOutput);
        return wire
            .wire__crate__api__receive__ffi_outputs_unknown_identify_receiver_outputs(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_provisional_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiOutputsUnknownIdentifyReceiverOutputsConstMeta,
      argValues: [that, isReceiverOutput],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiOutputsUnknownIdentifyReceiverOutputsConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_outputs_unknown_identify_receiver_outputs",
            argNames: ["that", "isReceiverOutput"],
          );

  @override
  Future<bool> crateApiReceiveFfiPayjoinProposalIsOutputSubstitutionDisabled(
      {required FfiPayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_payjoin_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_payjoin_proposal_is_output_substitution_disabled(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiPayjoinProposalIsOutputSubstitutionDisabledConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiPayjoinProposalIsOutputSubstitutionDisabledConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_payjoin_proposal_is_output_substitution_disabled",
            argNames: ["that"],
          );

  @override
  Future<Uint64List> crateApiReceiveFfiPayjoinProposalOwnedVouts(
      {required FfiPayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_payjoin_proposal(that);
        return wire.wire__crate__api__receive__ffi_payjoin_proposal_owned_vouts(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiPayjoinProposalOwnedVoutsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiPayjoinProposalOwnedVoutsConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_payjoin_proposal_owned_vouts",
        argNames: ["that"],
      );

  @override
  Future<String> crateApiReceiveFfiPayjoinProposalPsbt(
      {required FfiPayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_payjoin_proposal(that);
        return wire.wire__crate__api__receive__ffi_payjoin_proposal_psbt(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiPayjoinProposalPsbtConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiPayjoinProposalPsbtConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_payjoin_proposal_psbt",
        argNames: ["that"],
      );

  @override
  Future<List<OutPoint>> crateApiReceiveFfiPayjoinProposalUtxosToBeLocked(
      {required FfiPayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_payjoin_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_payjoin_proposal_utxos_to_be_locked(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_out_point,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiPayjoinProposalUtxosToBeLockedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiPayjoinProposalUtxosToBeLockedConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_payjoin_proposal_utxos_to_be_locked",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiReceiveFfiProvisionalProposalContributeWitnessInput(
      {required FfiProvisionalProposal that,
      required TxOut txo,
      required OutPoint outpoint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_provisional_proposal(that);
        var arg1 = cst_encode_box_autoadd_tx_out(txo);
        var arg2 = cst_encode_box_autoadd_out_point(outpoint);
        return wire
            .wire__crate__api__receive__ffi_provisional_proposal_contribute_witness_input(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiProvisionalProposalContributeWitnessInputConstMeta,
      argValues: [that, txo, outpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiProvisionalProposalContributeWitnessInputConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_provisional_proposal_contribute_witness_input",
            argNames: ["that", "txo", "outpoint"],
          );

  @override
  Future<FfiPayjoinProposal>
      crateApiReceiveFfiProvisionalProposalFinalizeProposal(
          {required FfiProvisionalProposal that,
          required FutureOr<String> Function(String) processPsbt,
          BigInt? minFeeRateSatPerVb}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_provisional_proposal(that);
        var arg1 =
            cst_encode_DartFn_Inputs_String_Output_String_AnyhowException(
                processPsbt);
        var arg2 = cst_encode_opt_box_autoadd_u_64(minFeeRateSatPerVb);
        return wire
            .wire__crate__api__receive__ffi_provisional_proposal_finalize_proposal(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_payjoin_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiProvisionalProposalFinalizeProposalConstMeta,
      argValues: [that, processPsbt, minFeeRateSatPerVb],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiProvisionalProposalFinalizeProposalConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_provisional_proposal_finalize_proposal",
            argNames: ["that", "processPsbt", "minFeeRateSatPerVb"],
          );

  @override
  Future<OutPoint> crateApiReceiveFfiProvisionalProposalTryPreservingPrivacy(
      {required FfiProvisionalProposal that,
      required Map<BigInt, OutPoint> candidateInputs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_provisional_proposal(that);
        var arg1 = cst_encode_Map_u_64_out_point(candidateInputs);
        return wire
            .wire__crate__api__receive__ffi_provisional_proposal_try_preserving_privacy(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_out_point,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiProvisionalProposalTryPreservingPrivacyConstMeta,
      argValues: [that, candidateInputs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiProvisionalProposalTryPreservingPrivacyConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_provisional_proposal_try_preserving_privacy",
            argNames: ["that", "candidateInputs"],
          );

  @override
  Future<void> crateApiReceiveFfiProvisionalProposalTrySubstituteReceiverOutput(
      {required FfiProvisionalProposal that,
      required FutureOr<Uint8List> Function() generateScript}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_provisional_proposal(that);
        var arg1 =
            cst_encode_DartFn_Inputs__Output_list_prim_u_8_strict_AnyhowException(
                generateScript);
        return wire
            .wire__crate__api__receive__ffi_provisional_proposal_try_substitute_receiver_output(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiProvisionalProposalTrySubstituteReceiverOutputConstMeta,
      argValues: [that, generateScript],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiProvisionalProposalTrySubstituteReceiverOutputConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_provisional_proposal_try_substitute_receiver_output",
            argNames: ["that", "generateScript"],
          );

  @override
  Future<(Request, ClientResponse)>
      crateApiReceiveFfiSessionInitializerExtractReq(
          {required FfiSessionInitializer that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_session_initializer(that);
        return wire
            .wire__crate__api__receive__ffi_session_initializer_extract_req(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_client_response,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiReceiveFfiSessionInitializerExtractReqConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiSessionInitializerExtractReqConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_session_initializer_extract_req",
        argNames: ["that"],
      );

  @override
  Future<FfiSessionInitializer> crateApiReceiveFfiSessionInitializerNew(
      {required String address,
      BigInt? expireAfter,
      required Network network,
      required FfiUrl directory,
      required FfiOhttpKeys ohttpKeys,
      required FfiUrl ohttpRelay}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(address);
        var arg1 = cst_encode_opt_box_autoadd_u_64(expireAfter);
        var arg2 = cst_encode_network(network);
        var arg3 = cst_encode_box_autoadd_ffi_url(directory);
        var arg4 = cst_encode_box_autoadd_ffi_ohttp_keys(ohttpKeys);
        var arg5 = cst_encode_box_autoadd_ffi_url(ohttpRelay);
        return wire.wire__crate__api__receive__ffi_session_initializer_new(
            port_, arg0, arg1, arg2, arg3, arg4, arg5);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_session_initializer,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiReceiveFfiSessionInitializerNewConstMeta,
      argValues: [
        address,
        expireAfter,
        network,
        directory,
        ohttpKeys,
        ohttpRelay
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiSessionInitializerNewConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_session_initializer_new",
        argNames: [
          "address",
          "expireAfter",
          "network",
          "directory",
          "ohttpKeys",
          "ohttpRelay"
        ],
      );

  @override
  Future<FfiActiveSession> crateApiReceiveFfiSessionInitializerProcessRes(
      {required FfiSessionInitializer that,
      required List<int> body,
      required ClientResponse ctx}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_session_initializer(that);
        var arg1 = cst_encode_list_prim_u_8_loose(body);
        var arg2 = cst_encode_box_autoadd_client_response(ctx);
        return wire
            .wire__crate__api__receive__ffi_session_initializer_process_res(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_active_session,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiReceiveFfiSessionInitializerProcessResConstMeta,
      argValues: [that, body, ctx],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiSessionInitializerProcessResConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_session_initializer_process_res",
        argNames: ["that", "body", "ctx"],
      );

  @override
  Future<FfiMaybeInputsOwned>
      crateApiReceiveFfiUncheckedProposalAssumeInteractiveReceiver(
          {required FfiUncheckedProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_unchecked_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_assume_interactive_receiver(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_maybe_inputs_owned,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiUncheckedProposalAssumeInteractiveReceiverConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiUncheckedProposalAssumeInteractiveReceiverConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_unchecked_proposal_assume_interactive_receiver",
            argNames: ["that"],
          );

  @override
  Future<FfiMaybeInputsOwned>
      crateApiReceiveFfiUncheckedProposalCheckBroadcastSuitability(
          {required FfiUncheckedProposal that,
          BigInt? minFeeRate,
          required FutureOr<bool> Function(Uint8List) canBroadcast}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_unchecked_proposal(that);
        var arg1 = cst_encode_opt_box_autoadd_u_64(minFeeRate);
        var arg2 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                canBroadcast);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_check_broadcast_suitability(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_maybe_inputs_owned,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiUncheckedProposalCheckBroadcastSuitabilityConstMeta,
      argValues: [that, minFeeRate, canBroadcast],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiUncheckedProposalCheckBroadcastSuitabilityConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_unchecked_proposal_check_broadcast_suitability",
            argNames: ["that", "minFeeRate", "canBroadcast"],
          );

  @override
  Future<Uint8List>
      crateApiReceiveFfiUncheckedProposalExtractTxToScheduleBroadcast(
          {required FfiUncheckedProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_unchecked_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_extract_tx_to_schedule_broadcast(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiUncheckedProposalExtractTxToScheduleBroadcastConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiUncheckedProposalExtractTxToScheduleBroadcastConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_unchecked_proposal_extract_tx_to_schedule_broadcast",
            argNames: ["that"],
          );

  @override
  Future<FfiUncheckedProposal> crateApiReceiveFfiUncheckedProposalFromRequest(
      {required List<int> body,
      required String query,
      required Headers headers}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8_loose(body);
        var arg1 = cst_encode_String(query);
        var arg2 = cst_encode_box_autoadd_headers(headers);
        return wire
            .wire__crate__api__receive__ffi_unchecked_proposal_from_request(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_unchecked_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiReceiveFfiUncheckedProposalFromRequestConstMeta,
      argValues: [body, query, headers],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiUncheckedProposalFromRequestConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_unchecked_proposal_from_request",
        argNames: ["body", "query", "headers"],
      );

  @override
  Future<FfiV2MaybeMixedInputScripts>
      crateApiReceiveFfiV2MaybeInputsOwnedCheckInputsNotOwned(
          {required FfiV2MaybeInputsOwned that,
          required FutureOr<bool> Function(Uint8List) isOwned}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_maybe_inputs_owned(that);
        var arg1 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                isOwned);
        return wire
            .wire__crate__api__receive__ffi_v_2_maybe_inputs_owned_check_inputs_not_owned(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_v_2_maybe_mixed_input_scripts,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2MaybeInputsOwnedCheckInputsNotOwnedConstMeta,
      argValues: [that, isOwned],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2MaybeInputsOwnedCheckInputsNotOwnedConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_maybe_inputs_owned_check_inputs_not_owned",
            argNames: ["that", "isOwned"],
          );

  @override
  Future<FfiV2OutputsUnknown>
      crateApiReceiveFfiV2MaybeInputsSeenCheckNoInputsSeenBefore(
          {required FfiV2MaybeInputsSeen that,
          required FutureOr<bool> Function(OutPoint) isKnown}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_maybe_inputs_seen(that);
        var arg1 =
            cst_encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
                isKnown);
        return wire
            .wire__crate__api__receive__ffi_v_2_maybe_inputs_seen_check_no_inputs_seen_before(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_v_2_outputs_unknown,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2MaybeInputsSeenCheckNoInputsSeenBeforeConstMeta,
      argValues: [that, isKnown],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2MaybeInputsSeenCheckNoInputsSeenBeforeConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_maybe_inputs_seen_check_no_inputs_seen_before",
            argNames: ["that", "isKnown"],
          );

  @override
  Future<FfiV2MaybeInputsSeen>
      crateApiReceiveFfiV2MaybeMixedInputScriptsCheckNoMixedInputScripts(
          {required FfiV2MaybeMixedInputScripts that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 =
            cst_encode_box_autoadd_ffi_v_2_maybe_mixed_input_scripts(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_maybe_mixed_input_scripts_check_no_mixed_input_scripts(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_v_2_maybe_inputs_seen,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2MaybeMixedInputScriptsCheckNoMixedInputScriptsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2MaybeMixedInputScriptsCheckNoMixedInputScriptsConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_v_2_maybe_mixed_input_scripts_check_no_mixed_input_scripts",
            argNames: ["that"],
          );

  @override
  Future<FfiV2ProvisionalProposal>
      crateApiReceiveFfiV2OutputsUnknownIdentifyReceiverOutputs(
          {required FfiV2OutputsUnknown that,
          required FutureOr<bool> Function(Uint8List) isReceiverOutput}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_outputs_unknown(that);
        var arg1 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                isReceiverOutput);
        return wire
            .wire__crate__api__receive__ffi_v_2_outputs_unknown_identify_receiver_outputs(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_v_2_provisional_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2OutputsUnknownIdentifyReceiverOutputsConstMeta,
      argValues: [that, isReceiverOutput],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2OutputsUnknownIdentifyReceiverOutputsConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_outputs_unknown_identify_receiver_outputs",
            argNames: ["that", "isReceiverOutput"],
          );

  @override
  Future<String> crateApiReceiveFfiV2PayjoinProposalExtractV1Req(
      {required FfiV2PayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_payjoin_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_payjoin_proposal_extract_v1_req(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiV2PayjoinProposalExtractV1ReqConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiV2PayjoinProposalExtractV1ReqConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_2_payjoin_proposal_extract_v1_req",
        argNames: ["that"],
      );

  @override
  Future<(Request, ClientResponse)>
      crateApiReceiveFfiV2PayjoinProposalExtractV2Req(
          {required FfiV2PayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_payjoin_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_payjoin_proposal_extract_v2_req(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_client_response,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiReceiveFfiV2PayjoinProposalExtractV2ReqConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiV2PayjoinProposalExtractV2ReqConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_2_payjoin_proposal_extract_v2_req",
        argNames: ["that"],
      );

  @override
  Future<bool> crateApiReceiveFfiV2PayjoinProposalIsOutputSubstitutionDisabled(
      {required FfiV2PayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_payjoin_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_payjoin_proposal_is_output_substitution_disabled(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiV2PayjoinProposalIsOutputSubstitutionDisabledConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2PayjoinProposalIsOutputSubstitutionDisabledConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_v_2_payjoin_proposal_is_output_substitution_disabled",
            argNames: ["that"],
          );

  @override
  Future<Uint64List> crateApiReceiveFfiV2PayjoinProposalOwnedVouts(
      {required FfiV2PayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_payjoin_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_payjoin_proposal_owned_vouts(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_64_strict,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiV2PayjoinProposalOwnedVoutsConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiV2PayjoinProposalOwnedVoutsConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_2_payjoin_proposal_owned_vouts",
        argNames: ["that"],
      );

  @override
  Future<void> crateApiReceiveFfiV2PayjoinProposalProcessRes(
      {required FfiV2PayjoinProposal that,
      required List<int> res,
      required ClientResponse ohttpContext}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_payjoin_proposal(that);
        var arg1 = cst_encode_list_prim_u_8_loose(res);
        var arg2 = cst_encode_box_autoadd_client_response(ohttpContext);
        return wire
            .wire__crate__api__receive__ffi_v_2_payjoin_proposal_process_res(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiReceiveFfiV2PayjoinProposalProcessResConstMeta,
      argValues: [that, res, ohttpContext],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiV2PayjoinProposalProcessResConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_2_payjoin_proposal_process_res",
        argNames: ["that", "res", "ohttpContext"],
      );

  @override
  Future<String> crateApiReceiveFfiV2PayjoinProposalPsbt(
      {required FfiV2PayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_payjoin_proposal(that);
        return wire.wire__crate__api__receive__ffi_v_2_payjoin_proposal_psbt(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiV2PayjoinProposalPsbtConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiReceiveFfiV2PayjoinProposalPsbtConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_v_2_payjoin_proposal_psbt",
        argNames: ["that"],
      );

  @override
  Future<List<OutPoint>> crateApiReceiveFfiV2PayjoinProposalUtxosToBeLocked(
      {required FfiV2PayjoinProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_payjoin_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_payjoin_proposal_utxos_to_be_locked(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_out_point,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiReceiveFfiV2PayjoinProposalUtxosToBeLockedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2PayjoinProposalUtxosToBeLockedConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_payjoin_proposal_utxos_to_be_locked",
            argNames: ["that"],
          );

  @override
  Future<void> crateApiReceiveFfiV2ProvisionalProposalContributeWitnessInput(
      {required FfiV2ProvisionalProposal that,
      required TxOut txo,
      required OutPoint outpoint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_provisional_proposal(that);
        var arg1 = cst_encode_box_autoadd_tx_out(txo);
        var arg2 = cst_encode_box_autoadd_out_point(outpoint);
        return wire
            .wire__crate__api__receive__ffi_v_2_provisional_proposal_contribute_witness_input(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2ProvisionalProposalContributeWitnessInputConstMeta,
      argValues: [that, txo, outpoint],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2ProvisionalProposalContributeWitnessInputConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_provisional_proposal_contribute_witness_input",
            argNames: ["that", "txo", "outpoint"],
          );

  @override
  Future<FfiV2PayjoinProposal>
      crateApiReceiveFfiV2ProvisionalProposalFinalizeProposal(
          {required FfiV2ProvisionalProposal that,
          required FutureOr<String> Function(String) processPsbt,
          BigInt? minFeeRateSatPerVb}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_provisional_proposal(that);
        var arg1 =
            cst_encode_DartFn_Inputs_String_Output_String_AnyhowException(
                processPsbt);
        var arg2 = cst_encode_opt_box_autoadd_u_64(minFeeRateSatPerVb);
        return wire
            .wire__crate__api__receive__ffi_v_2_provisional_proposal_finalize_proposal(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_v_2_payjoin_proposal,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2ProvisionalProposalFinalizeProposalConstMeta,
      argValues: [that, processPsbt, minFeeRateSatPerVb],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2ProvisionalProposalFinalizeProposalConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_provisional_proposal_finalize_proposal",
            argNames: ["that", "processPsbt", "minFeeRateSatPerVb"],
          );

  @override
  Future<bool>
      crateApiReceiveFfiV2ProvisionalProposalIsOutputSubstitutionDisabled(
          {required FfiV2ProvisionalProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_provisional_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_provisional_proposal_is_output_substitution_disabled(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiV2ProvisionalProposalIsOutputSubstitutionDisabledConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2ProvisionalProposalIsOutputSubstitutionDisabledConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_v_2_provisional_proposal_is_output_substitution_disabled",
            argNames: ["that"],
          );

  @override
  Future<OutPoint> crateApiReceiveFfiV2ProvisionalProposalTryPreservingPrivacy(
      {required FfiV2ProvisionalProposal that,
      required Map<BigInt, OutPoint> candidateInputs}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_provisional_proposal(that);
        var arg1 = cst_encode_Map_u_64_out_point(candidateInputs);
        return wire
            .wire__crate__api__receive__ffi_v_2_provisional_proposal_try_preserving_privacy(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_out_point,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2ProvisionalProposalTryPreservingPrivacyConstMeta,
      argValues: [that, candidateInputs],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2ProvisionalProposalTryPreservingPrivacyConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_provisional_proposal_try_preserving_privacy",
            argNames: ["that", "candidateInputs"],
          );

  @override
  Future<void>
      crateApiReceiveFfiV2ProvisionalProposalTrySubstituteReceiverOutput(
          {required FfiV2ProvisionalProposal that,
          required FutureOr<Uint8List> Function() generateScript}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_provisional_proposal(that);
        var arg1 =
            cst_encode_DartFn_Inputs__Output_list_prim_u_8_strict_AnyhowException(
                generateScript);
        return wire
            .wire__crate__api__receive__ffi_v_2_provisional_proposal_try_substitute_receiver_output(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2ProvisionalProposalTrySubstituteReceiverOutputConstMeta,
      argValues: [that, generateScript],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2ProvisionalProposalTrySubstituteReceiverOutputConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_v_2_provisional_proposal_try_substitute_receiver_output",
            argNames: ["that", "generateScript"],
          );

  @override
  Future<FfiV2MaybeInputsOwned>
      crateApiReceiveFfiV2UncheckedProposalAssumeInteractiveReceiver(
          {required FfiV2UncheckedProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_unchecked_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_unchecked_proposal_assume_interactive_receiver(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_v_2_maybe_inputs_owned,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiV2UncheckedProposalAssumeInteractiveReceiverConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2UncheckedProposalAssumeInteractiveReceiverConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_unchecked_proposal_assume_interactive_receiver",
            argNames: ["that"],
          );

  @override
  Future<FfiV2MaybeInputsOwned>
      crateApiReceiveFfiV2UncheckedProposalCheckBroadcastSuitability(
          {required FfiV2UncheckedProposal that,
          BigInt? minFeeRate,
          required FutureOr<bool> Function(Uint8List) canBroadcast}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_unchecked_proposal(that);
        var arg1 = cst_encode_opt_box_autoadd_u_64(minFeeRate);
        var arg2 =
            cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
                canBroadcast);
        return wire
            .wire__crate__api__receive__ffi_v_2_unchecked_proposal_check_broadcast_suitability(
                port_, arg0, arg1, arg2);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_v_2_maybe_inputs_owned,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta:
          kCrateApiReceiveFfiV2UncheckedProposalCheckBroadcastSuitabilityConstMeta,
      argValues: [that, minFeeRate, canBroadcast],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2UncheckedProposalCheckBroadcastSuitabilityConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_v_2_unchecked_proposal_check_broadcast_suitability",
            argNames: ["that", "minFeeRate", "canBroadcast"],
          );

  @override
  Future<Uint8List>
      crateApiReceiveFfiV2UncheckedProposalExtractTxToScheduleBroadcast(
          {required FfiV2UncheckedProposal that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_v_2_unchecked_proposal(that);
        return wire
            .wire__crate__api__receive__ffi_v_2_unchecked_proposal_extract_tx_to_schedule_broadcast(
                port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiReceiveFfiV2UncheckedProposalExtractTxToScheduleBroadcastConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiReceiveFfiV2UncheckedProposalExtractTxToScheduleBroadcastConstMeta =>
          const TaskConstMeta(
            debugName:
                "ffi_v_2_unchecked_proposal_extract_tx_to_schedule_broadcast",
            argNames: ["that"],
          );

  @override
  Future<String> crateApiSendFfiContextV1ProcessResponse(
      {required FfiContextV1 that, required List<int> response}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_context_v_1(that);
        var arg1 = cst_encode_list_prim_u_8_loose(response);
        return wire.wire__crate__api__send__ffi_context_v_1_process_response(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiSendFfiContextV1ProcessResponseConstMeta,
      argValues: [that, response],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiContextV1ProcessResponseConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_context_v_1_process_response",
        argNames: ["that", "response"],
      );

  @override
  Future<String?> crateApiSendFfiContextV2ProcessResponse(
      {required FfiContextV2 that, required List<int> response}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_context_v_2(that);
        var arg1 = cst_encode_list_prim_u_8_loose(response);
        return wire.wire__crate__api__send__ffi_context_v_2_process_response(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiSendFfiContextV2ProcessResponseConstMeta,
      argValues: [that, response],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiContextV2ProcessResponseConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_context_v_2_process_response",
        argNames: ["that", "response"],
      );

  @override
  Future<FfiRequestBuilder>
      crateApiSendFfiRequestBuilderAlwaysDisableOutputSubstitution(
          {required FfiRequestBuilder that, required bool disable}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_request_builder(that);
        var arg1 = cst_encode_bool(disable);
        return wire
            .wire__crate__api__send__ffi_request_builder_always_disable_output_substitution(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_request_builder,
        decodeErrorData: null,
      ),
      constMeta:
          kCrateApiSendFfiRequestBuilderAlwaysDisableOutputSubstitutionConstMeta,
      argValues: [that, disable],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSendFfiRequestBuilderAlwaysDisableOutputSubstitutionConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_request_builder_always_disable_output_substitution",
            argNames: ["that", "disable"],
          );

  @override
  Future<FfiRequestContext> crateApiSendFfiRequestBuilderBuildNonIncentivizing(
      {required FfiRequestBuilder that, required BigInt minFeeRate}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_request_builder(that);
        var arg1 = cst_encode_u_64(minFeeRate);
        return wire
            .wire__crate__api__send__ffi_request_builder_build_non_incentivizing(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_request_context,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiSendFfiRequestBuilderBuildNonIncentivizingConstMeta,
      argValues: [that, minFeeRate],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSendFfiRequestBuilderBuildNonIncentivizingConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_request_builder_build_non_incentivizing",
            argNames: ["that", "minFeeRate"],
          );

  @override
  Future<FfiRequestContext> crateApiSendFfiRequestBuilderBuildRecommended(
      {required FfiRequestBuilder that, required BigInt minFeeRate}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_request_builder(that);
        var arg1 = cst_encode_u_64(minFeeRate);
        return wire
            .wire__crate__api__send__ffi_request_builder_build_recommended(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_request_context,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiSendFfiRequestBuilderBuildRecommendedConstMeta,
      argValues: [that, minFeeRate],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiRequestBuilderBuildRecommendedConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_request_builder_build_recommended",
        argNames: ["that", "minFeeRate"],
      );

  @override
  Future<FfiRequestContext> crateApiSendFfiRequestBuilderBuildWithAdditionalFee(
      {required FfiRequestBuilder that,
      required BigInt maxFeeContribution,
      int? changeIndex,
      required BigInt minFeeRate,
      required bool clampFeeContribution}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_request_builder(that);
        var arg1 = cst_encode_u_64(maxFeeContribution);
        var arg2 = cst_encode_opt_box_autoadd_u_8(changeIndex);
        var arg3 = cst_encode_u_64(minFeeRate);
        var arg4 = cst_encode_bool(clampFeeContribution);
        return wire
            .wire__crate__api__send__ffi_request_builder_build_with_additional_fee(
                port_, arg0, arg1, arg2, arg3, arg4);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_request_context,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiSendFfiRequestBuilderBuildWithAdditionalFeeConstMeta,
      argValues: [
        that,
        maxFeeContribution,
        changeIndex,
        minFeeRate,
        clampFeeContribution
      ],
      apiImpl: this,
    ));
  }

  TaskConstMeta
      get kCrateApiSendFfiRequestBuilderBuildWithAdditionalFeeConstMeta =>
          const TaskConstMeta(
            debugName: "ffi_request_builder_build_with_additional_fee",
            argNames: [
              "that",
              "maxFeeContribution",
              "changeIndex",
              "minFeeRate",
              "clampFeeContribution"
            ],
          );

  @override
  Future<FfiRequestBuilder> crateApiSendFfiRequestBuilderFromPsbtAndUri(
      {required String psbtBase64, required FfiPjUri pjUri}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(psbtBase64);
        var arg1 = cst_encode_box_autoadd_ffi_pj_uri(pjUri);
        return wire
            .wire__crate__api__send__ffi_request_builder_from_psbt_and_uri(
                port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_request_builder,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiSendFfiRequestBuilderFromPsbtAndUriConstMeta,
      argValues: [psbtBase64, pjUri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiRequestBuilderFromPsbtAndUriConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_request_builder_from_psbt_and_uri",
        argNames: ["psbtBase64", "pjUri"],
      );

  @override
  Future<(Request, FfiContextV1)> crateApiSendFfiRequestContextExtractV1(
      {required FfiRequestContext that}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_request_context(that);
        return wire.wire__crate__api__send__ffi_request_context_extract_v1(
            port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_ffi_context_v_1,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiSendFfiRequestContextExtractV1ConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiRequestContextExtractV1ConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_request_context_extract_v1",
        argNames: ["that"],
      );

  @override
  Future<(Request, FfiContextV2)> crateApiSendFfiRequestContextExtractV2(
      {required FfiRequestContext that, required FfiUrl ohttpProxyUrl}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_ffi_request_context(that);
        var arg1 = cst_encode_box_autoadd_ffi_url(ohttpProxyUrl);
        return wire.wire__crate__api__send__ffi_request_context_extract_v2(
            port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_record_request_ffi_context_v_2,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiSendFfiRequestContextExtractV2ConstMeta,
      argValues: [that, ohttpProxyUrl],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiSendFfiRequestContextExtractV2ConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_request_context_extract_v2",
        argNames: ["that", "ohttpProxyUrl"],
      );

  @override
  Future<FfiOhttpKeys> crateApiUriFfiOhttpKeysDecode(
      {required List<int> bytes}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8_loose(bytes);
        return wire.wire__crate__api__uri__ffi_ohttp_keys_decode(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_ohttp_keys,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiUriFfiOhttpKeysDecodeConstMeta,
      argValues: [bytes],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiOhttpKeysDecodeConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_ohttp_keys_decode",
        argNames: ["bytes"],
      );

  @override
  String crateApiUriFfiPjUriAddress({required FfiPjUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri(that);
        return wire.wire__crate__api__uri__ffi_pj_uri_address(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriAddressConstMeta => const TaskConstMeta(
        debugName: "ffi_pj_uri_address",
        argNames: ["that"],
      );

  @override
  double? crateApiUriFfiPjUriAmount({required FfiPjUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri(that);
        return wire.wire__crate__api__uri__ffi_pj_uri_amount(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriAmountConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriAmountConstMeta => const TaskConstMeta(
        debugName: "ffi_pj_uri_amount",
        argNames: ["that"],
      );

  @override
  String crateApiUriFfiPjUriAsString({required FfiPjUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri(that);
        return wire.wire__crate__api__uri__ffi_pj_uri_as_string(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriAsStringConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_as_string",
        argNames: ["that"],
      );

  @override
  FfiPjUriBuilder crateApiUriFfiPjUriBuilderAmount(
      {required FfiPjUriBuilder that, required BigInt amount}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri_builder(that);
        var arg1 = cst_encode_u_64(amount);
        return wire.wire__crate__api__uri__ffi_pj_uri_builder_amount(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri_builder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriBuilderAmountConstMeta,
      argValues: [that, amount],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriBuilderAmountConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_builder_amount",
        argNames: ["that", "amount"],
      );

  @override
  FfiPjUri crateApiUriFfiPjUriBuilderBuild({required FfiPjUriBuilder that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri_builder(that);
        return wire.wire__crate__api__uri__ffi_pj_uri_builder_build(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriBuilderBuildConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_builder_build",
        argNames: ["that"],
      );

  @override
  Future<FfiPjUriBuilder> crateApiUriFfiPjUriBuilderCreate(
      {required String address,
      required FfiUrl pj,
      FfiOhttpKeys? ohttpKeys,
      BigInt? expiry}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(address);
        var arg1 = cst_encode_box_autoadd_ffi_url(pj);
        var arg2 = cst_encode_opt_box_autoadd_ffi_ohttp_keys(ohttpKeys);
        var arg3 = cst_encode_opt_box_autoadd_u_64(expiry);
        return wire.wire__crate__api__uri__ffi_pj_uri_builder_create(
            port_, arg0, arg1, arg2, arg3);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri_builder,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiUriFfiPjUriBuilderCreateConstMeta,
      argValues: [address, pj, ohttpKeys, expiry],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriBuilderCreateConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_builder_create",
        argNames: ["address", "pj", "ohttpKeys", "expiry"],
      );

  @override
  FfiPjUriBuilder crateApiUriFfiPjUriBuilderLabel(
      {required FfiPjUriBuilder that, required String label}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri_builder(that);
        var arg1 = cst_encode_String(label);
        return wire.wire__crate__api__uri__ffi_pj_uri_builder_label(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri_builder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriBuilderLabelConstMeta,
      argValues: [that, label],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriBuilderLabelConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_builder_label",
        argNames: ["that", "label"],
      );

  @override
  FfiPjUriBuilder crateApiUriFfiPjUriBuilderMessage(
      {required FfiPjUriBuilder that, required String message}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri_builder(that);
        var arg1 = cst_encode_String(message);
        return wire.wire__crate__api__uri__ffi_pj_uri_builder_message(
            arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri_builder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriBuilderMessageConstMeta,
      argValues: [that, message],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriBuilderMessageConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_builder_message",
        argNames: ["that", "message"],
      );

  @override
  FfiPjUriBuilder crateApiUriFfiPjUriBuilderPjos(
      {required FfiPjUriBuilder that, required bool pjos}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_pj_uri_builder(that);
        var arg1 = cst_encode_bool(pjos);
        return wire.wire__crate__api__uri__ffi_pj_uri_builder_pjos(arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri_builder,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiPjUriBuilderPjosConstMeta,
      argValues: [that, pjos],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiPjUriBuilderPjosConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_pj_uri_builder_pjos",
        argNames: ["that", "pjos"],
      );

  @override
  String crateApiUriFfiUriAddress({required FfiUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_uri(that);
        return wire.wire__crate__api__uri__ffi_uri_address(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUriAddressConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriAddressConstMeta => const TaskConstMeta(
        debugName: "ffi_uri_address",
        argNames: ["that"],
      );

  @override
  double? crateApiUriFfiUriAmount({required FfiUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_uri(that);
        return wire.wire__crate__api__uri__ffi_uri_amount(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_box_autoadd_f_64,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUriAmountConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriAmountConstMeta => const TaskConstMeta(
        debugName: "ffi_uri_amount",
        argNames: ["that"],
      );

  @override
  String crateApiUriFfiUriAsString({required FfiUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_uri(that);
        return wire.wire__crate__api__uri__ffi_uri_as_string(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUriAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriAsStringConstMeta => const TaskConstMeta(
        debugName: "ffi_uri_as_string",
        argNames: ["that"],
      );

  @override
  FfiPjUri crateApiUriFfiUriCheckPjSupported({required FfiUri that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_uri(that);
        return wire.wire__crate__api__uri__ffi_uri_check_pj_supported(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_pj_uri,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiUriFfiUriCheckPjSupportedConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriCheckPjSupportedConstMeta =>
      const TaskConstMeta(
        debugName: "ffi_uri_check_pj_supported",
        argNames: ["that"],
      );

  @override
  FfiUri crateApiUriFfiUriFromStr({required String uri}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(uri);
        return wire.wire__crate__api__uri__ffi_uri_from_str(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_uri,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiUriFfiUriFromStrConstMeta,
      argValues: [uri],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUriFromStrConstMeta => const TaskConstMeta(
        debugName: "ffi_uri_from_str",
        argNames: ["uri"],
      );

  @override
  String crateApiUriFfiUrlAsString({required FfiUrl that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_url(that);
        return wire.wire__crate__api__uri__ffi_url_as_string(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUrlAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUrlAsStringConstMeta => const TaskConstMeta(
        debugName: "ffi_url_as_string",
        argNames: ["that"],
      );

  @override
  FfiUrl crateApiUriFfiUrlFromStr({required String url}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_String(url);
        return wire.wire__crate__api__uri__ffi_url_from_str(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_ffi_url,
        decodeErrorData: dco_decode_payjoin_error,
      ),
      constMeta: kCrateApiUriFfiUrlFromStrConstMeta,
      argValues: [url],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUrlFromStrConstMeta => const TaskConstMeta(
        debugName: "ffi_url_from_str",
        argNames: ["url"],
      );

  @override
  String? crateApiUriFfiUrlQuery({required FfiUrl that}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        var arg0 = cst_encode_box_autoadd_ffi_url(that);
        return wire.wire__crate__api__uri__ffi_url_query(arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_opt_String,
        decodeErrorData: null,
      ),
      constMeta: kCrateApiUriFfiUrlQueryConstMeta,
      argValues: [that],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiUriFfiUrlQueryConstMeta => const TaskConstMeta(
        debugName: "ffi_url_query",
        argNames: ["that"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_String_Output_String_AnyhowException(
          FutureOr<String> Function(String) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_String(rawArg0);

      Box<String>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_String(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(
    int,
  ) encode_DartFn_Inputs__Output_list_prim_u_8_strict_AnyhowException(
      FutureOr<Uint8List> Function() raw) {
    return (
      callId,
    ) async {
      Box<Uint8List>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw());
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_list_prim_u_8_strict(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
          FutureOr<bool> Function(Uint8List) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_list_prim_u_8_strict(rawArg0);

      Box<bool>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_bool(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
          FutureOr<bool> Function(OutPoint) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_out_point(rawArg0);

      Box<bool>? rawOutput;
      Box<AnyhowException>? rawError;
      try {
        rawOutput = Box(await raw(arg0));
      } catch (e, s) {
        rawError = Box(AnyhowException("$e\n\n$s"));
      }

      final serializer = SseSerializer(generalizedFrbRustBinding);
      assert((rawOutput != null) ^ (rawError != null));
      if (rawOutput != null) {
        serializer.buffer.putUint8(0);
        sse_encode_bool(rawOutput.value, serializer);
      } else {
        serializer.buffer.putUint8(1);
        sse_encode_AnyhowException(rawError!.value, serializer);
      }
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcV2PayjoinProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcV2PayjoinProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcContextV1 => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv1ContextV1;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcContextV1 => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv1ContextV1;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ArcContextV2 => wire
          .rust_arc_increment_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ArcContextV2 => wire
          .rust_arc_decrement_strong_count_RustOpaque_Arcpayjoin_ffisendv2ContextV2;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeInputsOwned => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeInputsOwned => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeInputsSeen => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeInputsSeen => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MaybeMixedInputScripts => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MaybeMixedInputScripts => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OutputsUnknown => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OutputsUnknown => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1OutputsUnknown;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PayjoinProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1PayjoinProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PayjoinProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1PayjoinProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ProvisionalProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ProvisionalProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1ProvisionalProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_UncheckedProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev1UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_UncheckedProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev1UncheckedProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_ActiveSession => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2ActiveSession;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_ActiveSession => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2ActiveSession;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_SessionInitializer => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2SessionInitializer;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_SessionInitializer => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2SessionInitializer;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2MaybeInputsOwned => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2MaybeInputsOwned => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2MaybeInputsSeen => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2MaybeInputsSeen => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2MaybeMixedInputScripts => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2MaybeMixedInputScripts => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2OutputsUnknown => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2OutputsUnknown => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2ProvisionalProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2ProvisionalProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_V2UncheckedProposal => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_V2UncheckedProposal => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RequestBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendv1RequestBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RequestBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendv1RequestBuilder;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_RequestContext => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffisendv1RequestContext;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_RequestContext => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffisendv1RequestContext;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_OhttpKeys => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffitypesOhttpKeys;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_OhttpKeys => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffitypesOhttpKeys;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PjUri =>
      wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriPjUri;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PjUri =>
      wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriPjUri;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_PjUriBuilder => wire
          .rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriPjUriBuilder;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_PjUriBuilder => wire
          .rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriPjUriBuilder;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Uri =>
      wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriUri;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Uri =>
      wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriUri;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Url =>
      wire.rust_arc_increment_strong_count_RustOpaque_payjoin_ffiuriUrl;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Url =>
      wire.rust_arc_decrement_strong_count_RustOpaque_payjoin_ffiuriUrl;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_MutexOptionClientResponse => wire
          .rust_arc_increment_strong_count_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_MutexOptionClientResponse => wire
          .rust_arc_decrement_strong_count_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  FutureOr<String> Function(String)
      dco_decode_DartFn_Inputs_String_Output_String_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<Uint8List> Function()
      dco_decode_DartFn_Inputs__Output_list_prim_u_8_strict_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(Uint8List)
      dco_decode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  FutureOr<bool> Function(OutPoint)
      dco_decode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> dco_decode_Map_String_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_string_string(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<BigInt, OutPoint> dco_decode_Map_u_64_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(dco_decode_list_record_u_64_out_point(raw)
        .map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcV2PayjoinProposal
      dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcV2PayjoinProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcContextV1 dco_decode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcContextV1Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ArcContextV2 dco_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcContextV2Impl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MaybeInputsOwned dco_decode_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MaybeInputsOwnedImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MaybeInputsSeen dco_decode_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MaybeInputsSeenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MaybeMixedInputScripts
      dco_decode_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MaybeMixedInputScriptsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  OutputsUnknown dco_decode_RustOpaque_payjoin_ffireceivev1OutputsUnknown(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OutputsUnknownImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PayjoinProposal dco_decode_RustOpaque_payjoin_ffireceivev1PayjoinProposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PayjoinProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ProvisionalProposal
      dco_decode_RustOpaque_payjoin_ffireceivev1ProvisionalProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ProvisionalProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  UncheckedProposal dco_decode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UncheckedProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ActiveSession dco_decode_RustOpaque_payjoin_ffireceivev2ActiveSession(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ActiveSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SessionInitializer
      dco_decode_RustOpaque_payjoin_ffireceivev2SessionInitializer(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SessionInitializerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  V2MaybeInputsOwned
      dco_decode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V2MaybeInputsOwnedImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  V2MaybeInputsSeen dco_decode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V2MaybeInputsSeenImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  V2MaybeMixedInputScripts
      dco_decode_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V2MaybeMixedInputScriptsImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  V2OutputsUnknown dco_decode_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V2OutputsUnknownImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  V2ProvisionalProposal
      dco_decode_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V2ProvisionalProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  V2UncheckedProposal
      dco_decode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return V2UncheckedProposalImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RequestBuilder dco_decode_RustOpaque_payjoin_ffisendv1RequestBuilder(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RequestBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RequestContext dco_decode_RustOpaque_payjoin_ffisendv1RequestContext(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RequestContextImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  OhttpKeys dco_decode_RustOpaque_payjoin_ffitypesOhttpKeys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return OhttpKeysImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PjUri dco_decode_RustOpaque_payjoin_ffiuriPjUri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PjUriImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PjUriBuilder dco_decode_RustOpaque_payjoin_ffiuriPjUriBuilder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PjUriBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Uri dco_decode_RustOpaque_payjoin_ffiuriUri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UriImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Url dco_decode_RustOpaque_payjoin_ffiuriUrl(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return UrlImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MutexOptionClientResponse
      dco_decode_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MutexOptionClientResponseImpl.frbInternalDcoDecode(
        raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  ClientResponse dco_decode_box_autoadd_client_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_client_response(raw);
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FfiActiveSession dco_decode_box_autoadd_ffi_active_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_active_session(raw);
  }

  @protected
  FfiContextV1 dco_decode_box_autoadd_ffi_context_v_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_context_v_1(raw);
  }

  @protected
  FfiContextV2 dco_decode_box_autoadd_ffi_context_v_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_context_v_2(raw);
  }

  @protected
  FfiMaybeInputsOwned dco_decode_box_autoadd_ffi_maybe_inputs_owned(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_maybe_inputs_owned(raw);
  }

  @protected
  FfiMaybeInputsSeen dco_decode_box_autoadd_ffi_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_maybe_inputs_seen(raw);
  }

  @protected
  FfiMaybeMixedInputScripts
      dco_decode_box_autoadd_ffi_maybe_mixed_input_scripts(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_maybe_mixed_input_scripts(raw);
  }

  @protected
  FfiOhttpKeys dco_decode_box_autoadd_ffi_ohttp_keys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_ohttp_keys(raw);
  }

  @protected
  FfiOutputsUnknown dco_decode_box_autoadd_ffi_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_outputs_unknown(raw);
  }

  @protected
  FfiPayjoinProposal dco_decode_box_autoadd_ffi_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_payjoin_proposal(raw);
  }

  @protected
  FfiPjUri dco_decode_box_autoadd_ffi_pj_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_pj_uri(raw);
  }

  @protected
  FfiPjUriBuilder dco_decode_box_autoadd_ffi_pj_uri_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_pj_uri_builder(raw);
  }

  @protected
  FfiProvisionalProposal dco_decode_box_autoadd_ffi_provisional_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_provisional_proposal(raw);
  }

  @protected
  FfiRequestBuilder dco_decode_box_autoadd_ffi_request_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_request_builder(raw);
  }

  @protected
  FfiRequestContext dco_decode_box_autoadd_ffi_request_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_request_context(raw);
  }

  @protected
  FfiSessionInitializer dco_decode_box_autoadd_ffi_session_initializer(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_session_initializer(raw);
  }

  @protected
  FfiUncheckedProposal dco_decode_box_autoadd_ffi_unchecked_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_unchecked_proposal(raw);
  }

  @protected
  FfiUri dco_decode_box_autoadd_ffi_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_uri(raw);
  }

  @protected
  FfiUrl dco_decode_box_autoadd_ffi_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_url(raw);
  }

  @protected
  FfiV2MaybeInputsOwned dco_decode_box_autoadd_ffi_v_2_maybe_inputs_owned(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_maybe_inputs_owned(raw);
  }

  @protected
  FfiV2MaybeInputsSeen dco_decode_box_autoadd_ffi_v_2_maybe_inputs_seen(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_maybe_inputs_seen(raw);
  }

  @protected
  FfiV2MaybeMixedInputScripts
      dco_decode_box_autoadd_ffi_v_2_maybe_mixed_input_scripts(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_maybe_mixed_input_scripts(raw);
  }

  @protected
  FfiV2OutputsUnknown dco_decode_box_autoadd_ffi_v_2_outputs_unknown(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_outputs_unknown(raw);
  }

  @protected
  FfiV2PayjoinProposal dco_decode_box_autoadd_ffi_v_2_payjoin_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_payjoin_proposal(raw);
  }

  @protected
  FfiV2ProvisionalProposal dco_decode_box_autoadd_ffi_v_2_provisional_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_provisional_proposal(raw);
  }

  @protected
  FfiV2UncheckedProposal dco_decode_box_autoadd_ffi_v_2_unchecked_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_ffi_v_2_unchecked_proposal(raw);
  }

  @protected
  Headers dco_decode_box_autoadd_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_headers(raw);
  }

  @protected
  OutPoint dco_decode_box_autoadd_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_out_point(raw);
  }

  @protected
  TxOut dco_decode_box_autoadd_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_tx_out(raw);
  }

  @protected
  BigInt dco_decode_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_u_64(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  ClientResponse dco_decode_client_response(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ClientResponse(
      field0:
          dco_decode_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse(
              arr[0]),
    );
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  FfiActiveSession dco_decode_ffi_active_session(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiActiveSession(
      field0: dco_decode_RustOpaque_payjoin_ffireceivev2ActiveSession(arr[0]),
    );
  }

  @protected
  FfiContextV1 dco_decode_ffi_context_v_1(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiContextV1(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(arr[0]),
    );
  }

  @protected
  FfiContextV2 dco_decode_ffi_context_v_2(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiContextV2(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(arr[0]),
    );
  }

  @protected
  FfiMaybeInputsOwned dco_decode_ffi_maybe_inputs_owned(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiMaybeInputsOwned(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned(arr[0]),
    );
  }

  @protected
  FfiMaybeInputsSeen dco_decode_ffi_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiMaybeInputsSeen(
      field0: dco_decode_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen(arr[0]),
    );
  }

  @protected
  FfiMaybeMixedInputScripts dco_decode_ffi_maybe_mixed_input_scripts(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiMaybeMixedInputScripts(
      field0: dco_decode_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts(
          arr[0]),
    );
  }

  @protected
  FfiOhttpKeys dco_decode_ffi_ohttp_keys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiOhttpKeys(
      field0: dco_decode_RustOpaque_payjoin_ffitypesOhttpKeys(arr[0]),
    );
  }

  @protected
  FfiOutputsUnknown dco_decode_ffi_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiOutputsUnknown(
      field0: dco_decode_RustOpaque_payjoin_ffireceivev1OutputsUnknown(arr[0]),
    );
  }

  @protected
  FfiPayjoinProposal dco_decode_ffi_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPayjoinProposal(
      field0: dco_decode_RustOpaque_payjoin_ffireceivev1PayjoinProposal(arr[0]),
    );
  }

  @protected
  FfiPjUri dco_decode_ffi_pj_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPjUri(
      field0: dco_decode_RustOpaque_payjoin_ffiuriPjUri(arr[0]),
    );
  }

  @protected
  FfiPjUriBuilder dco_decode_ffi_pj_uri_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiPjUriBuilder(
      internal: dco_decode_RustOpaque_payjoin_ffiuriPjUriBuilder(arr[0]),
    );
  }

  @protected
  FfiProvisionalProposal dco_decode_ffi_provisional_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiProvisionalProposal(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev1ProvisionalProposal(arr[0]),
    );
  }

  @protected
  FfiRequestBuilder dco_decode_ffi_request_builder(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiRequestBuilder(
      field0: dco_decode_RustOpaque_payjoin_ffisendv1RequestBuilder(arr[0]),
    );
  }

  @protected
  FfiRequestContext dco_decode_ffi_request_context(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiRequestContext(
      field0: dco_decode_RustOpaque_payjoin_ffisendv1RequestContext(arr[0]),
    );
  }

  @protected
  FfiSessionInitializer dco_decode_ffi_session_initializer(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiSessionInitializer(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev2SessionInitializer(arr[0]),
    );
  }

  @protected
  FfiUncheckedProposal dco_decode_ffi_unchecked_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiUncheckedProposal(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(arr[0]),
    );
  }

  @protected
  FfiUri dco_decode_ffi_uri(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiUri(
      field0: dco_decode_RustOpaque_payjoin_ffiuriUri(arr[0]),
    );
  }

  @protected
  FfiUrl dco_decode_ffi_url(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiUrl(
      field0: dco_decode_RustOpaque_payjoin_ffiuriUrl(arr[0]),
    );
  }

  @protected
  FfiV2MaybeInputsOwned dco_decode_ffi_v_2_maybe_inputs_owned(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2MaybeInputsOwned(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned(arr[0]),
    );
  }

  @protected
  FfiV2MaybeInputsSeen dco_decode_ffi_v_2_maybe_inputs_seen(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2MaybeInputsSeen(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen(arr[0]),
    );
  }

  @protected
  FfiV2MaybeMixedInputScripts dco_decode_ffi_v_2_maybe_mixed_input_scripts(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2MaybeMixedInputScripts(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts(
              arr[0]),
    );
  }

  @protected
  FfiV2OutputsUnknown dco_decode_ffi_v_2_outputs_unknown(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2OutputsUnknown(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown(arr[0]),
    );
  }

  @protected
  FfiV2PayjoinProposal dco_decode_ffi_v_2_payjoin_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2PayjoinProposal(
      field0: dco_decode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
          arr[0]),
    );
  }

  @protected
  FfiV2ProvisionalProposal dco_decode_ffi_v_2_provisional_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2ProvisionalProposal(
      field0: dco_decode_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal(
          arr[0]),
    );
  }

  @protected
  FfiV2UncheckedProposal dco_decode_ffi_v_2_unchecked_proposal(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return FfiV2UncheckedProposal(
      field0:
          dco_decode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(arr[0]),
    );
  }

  @protected
  Headers dco_decode_headers(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return Headers(
      map: dco_decode_Map_String_String(arr[0]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<OutPoint> dco_decode_list_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_out_point).toList();
  }

  @protected
  Uint64List dco_decode_list_prim_u_64_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeUint64List(raw);
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, String)> dco_decode_list_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_record_string_string).toList();
  }

  @protected
  List<(BigInt, OutPoint)> dco_decode_list_record_u_64_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_u_64_out_point)
        .toList();
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  FfiOhttpKeys? dco_decode_opt_box_autoadd_ffi_ohttp_keys(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_ffi_ohttp_keys(raw);
  }

  @protected
  FfiV2UncheckedProposal? dco_decode_opt_box_autoadd_ffi_v_2_unchecked_proposal(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_ffi_v_2_unchecked_proposal(raw);
  }

  @protected
  BigInt? dco_decode_opt_box_autoadd_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  OutPoint dco_decode_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OutPoint(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  PayjoinError dco_decode_payjoin_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return PayjoinError_InvalidAddress(
          message: dco_decode_String(raw[1]),
        );
      case 1:
        return PayjoinError_InvalidScript(
          message: dco_decode_String(raw[1]),
        );
      case 2:
        return PayjoinError_NetworkValidation(
          message: dco_decode_String(raw[1]),
        );
      case 3:
        return PayjoinError_PsbtParseError(
          message: dco_decode_String(raw[1]),
        );
      case 4:
        return PayjoinError_ResponseError(
          message: dco_decode_String(raw[1]),
        );
      case 5:
        return PayjoinError_RequestError(
          message: dco_decode_String(raw[1]),
        );
      case 6:
        return PayjoinError_TransactionError(
          message: dco_decode_String(raw[1]),
        );
      case 7:
        return PayjoinError_ServerError(
          message: dco_decode_String(raw[1]),
        );
      case 8:
        return PayjoinError_SelectionError(
          message: dco_decode_String(raw[1]),
        );
      case 9:
        return PayjoinError_CreateRequestError(
          message: dco_decode_String(raw[1]),
        );
      case 10:
        return PayjoinError_PjParseError(
          message: dco_decode_String(raw[1]),
        );
      case 11:
        return PayjoinError_PjNotSupported(
          message: dco_decode_String(raw[1]),
        );
      case 12:
        return PayjoinError_ValidationError(
          message: dco_decode_String(raw[1]),
        );
      case 13:
        return PayjoinError_V2Error(
          message: dco_decode_String(raw[1]),
        );
      case 14:
        return PayjoinError_UnexpectedError(
          message: dco_decode_String(raw[1]),
        );
      case 15:
        return PayjoinError_OhttpError(
          message: dco_decode_String(raw[1]),
        );
      case 16:
        return PayjoinError_UrlError(
          message: dco_decode_String(raw[1]),
        );
      case 17:
        return PayjoinError_IoError(
          message: dco_decode_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  (Request, ClientResponse) dco_decode_record_request_client_response(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_request(arr[0]),
      dco_decode_client_response(arr[1]),
    );
  }

  @protected
  (Request, FfiContextV1) dco_decode_record_request_ffi_context_v_1(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_request(arr[0]),
      dco_decode_ffi_context_v_1(arr[1]),
    );
  }

  @protected
  (Request, FfiContextV2) dco_decode_record_request_ffi_context_v_2(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_request(arr[0]),
      dco_decode_ffi_context_v_2(arr[1]),
    );
  }

  @protected
  (String, String) dco_decode_record_string_string(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_String(arr[1]),
    );
  }

  @protected
  (BigInt, OutPoint) dco_decode_record_u_64_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_u_64(arr[0]),
      dco_decode_out_point(arr[1]),
    );
  }

  @protected
  Request dco_decode_request(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Request(
      url: dco_decode_ffi_url(arr[0]),
      body: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  TxOut dco_decode_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxOut(
      value: dco_decode_u_64(arr[0]),
      scriptPubkey: dco_decode_list_prim_u_8_strict(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  Map<String, String> sse_decode_Map_String_String(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_string_string(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<BigInt, OutPoint> sse_decode_Map_u_64_out_point(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_record_u_64_out_point(deserializer);
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcV2PayjoinProposal
      sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcV2PayjoinProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcContextV1 sse_decode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcContextV1Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ArcContextV2 sse_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcContextV2Impl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MaybeInputsOwned sse_decode_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MaybeInputsOwnedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MaybeInputsSeen sse_decode_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MaybeInputsSeenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MaybeMixedInputScripts
      sse_decode_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MaybeMixedInputScriptsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OutputsUnknown sse_decode_RustOpaque_payjoin_ffireceivev1OutputsUnknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OutputsUnknownImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PayjoinProposal sse_decode_RustOpaque_payjoin_ffireceivev1PayjoinProposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PayjoinProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ProvisionalProposal
      sse_decode_RustOpaque_payjoin_ffireceivev1ProvisionalProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ProvisionalProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  UncheckedProposal sse_decode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UncheckedProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  ActiveSession sse_decode_RustOpaque_payjoin_ffireceivev2ActiveSession(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ActiveSessionImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  SessionInitializer
      sse_decode_RustOpaque_payjoin_ffireceivev2SessionInitializer(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SessionInitializerImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V2MaybeInputsOwned
      sse_decode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V2MaybeInputsOwnedImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V2MaybeInputsSeen sse_decode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V2MaybeInputsSeenImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V2MaybeMixedInputScripts
      sse_decode_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V2MaybeMixedInputScriptsImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V2OutputsUnknown sse_decode_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V2OutputsUnknownImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V2ProvisionalProposal
      sse_decode_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V2ProvisionalProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  V2UncheckedProposal
      sse_decode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return V2UncheckedProposalImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RequestBuilder sse_decode_RustOpaque_payjoin_ffisendv1RequestBuilder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RequestBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  RequestContext sse_decode_RustOpaque_payjoin_ffisendv1RequestContext(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RequestContextImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  OhttpKeys sse_decode_RustOpaque_payjoin_ffitypesOhttpKeys(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return OhttpKeysImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PjUri sse_decode_RustOpaque_payjoin_ffiuriPjUri(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PjUriImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  PjUriBuilder sse_decode_RustOpaque_payjoin_ffiuriPjUriBuilder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PjUriBuilderImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Uri sse_decode_RustOpaque_payjoin_ffiuriUri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UriImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Url sse_decode_RustOpaque_payjoin_ffiuriUrl(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return UrlImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  MutexOptionClientResponse
      sse_decode_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MutexOptionClientResponseImpl.frbInternalSseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  ClientResponse sse_decode_box_autoadd_client_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_client_response(deserializer));
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  FfiActiveSession sse_decode_box_autoadd_ffi_active_session(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_active_session(deserializer));
  }

  @protected
  FfiContextV1 sse_decode_box_autoadd_ffi_context_v_1(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_context_v_1(deserializer));
  }

  @protected
  FfiContextV2 sse_decode_box_autoadd_ffi_context_v_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_context_v_2(deserializer));
  }

  @protected
  FfiMaybeInputsOwned sse_decode_box_autoadd_ffi_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_maybe_inputs_owned(deserializer));
  }

  @protected
  FfiMaybeInputsSeen sse_decode_box_autoadd_ffi_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_maybe_inputs_seen(deserializer));
  }

  @protected
  FfiMaybeMixedInputScripts
      sse_decode_box_autoadd_ffi_maybe_mixed_input_scripts(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_maybe_mixed_input_scripts(deserializer));
  }

  @protected
  FfiOhttpKeys sse_decode_box_autoadd_ffi_ohttp_keys(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_ohttp_keys(deserializer));
  }

  @protected
  FfiOutputsUnknown sse_decode_box_autoadd_ffi_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_outputs_unknown(deserializer));
  }

  @protected
  FfiPayjoinProposal sse_decode_box_autoadd_ffi_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_payjoin_proposal(deserializer));
  }

  @protected
  FfiPjUri sse_decode_box_autoadd_ffi_pj_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_pj_uri(deserializer));
  }

  @protected
  FfiPjUriBuilder sse_decode_box_autoadd_ffi_pj_uri_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_pj_uri_builder(deserializer));
  }

  @protected
  FfiProvisionalProposal sse_decode_box_autoadd_ffi_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_provisional_proposal(deserializer));
  }

  @protected
  FfiRequestBuilder sse_decode_box_autoadd_ffi_request_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_request_builder(deserializer));
  }

  @protected
  FfiRequestContext sse_decode_box_autoadd_ffi_request_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_request_context(deserializer));
  }

  @protected
  FfiSessionInitializer sse_decode_box_autoadd_ffi_session_initializer(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_session_initializer(deserializer));
  }

  @protected
  FfiUncheckedProposal sse_decode_box_autoadd_ffi_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_unchecked_proposal(deserializer));
  }

  @protected
  FfiUri sse_decode_box_autoadd_ffi_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_uri(deserializer));
  }

  @protected
  FfiUrl sse_decode_box_autoadd_ffi_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_url(deserializer));
  }

  @protected
  FfiV2MaybeInputsOwned sse_decode_box_autoadd_ffi_v_2_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_maybe_inputs_owned(deserializer));
  }

  @protected
  FfiV2MaybeInputsSeen sse_decode_box_autoadd_ffi_v_2_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_maybe_inputs_seen(deserializer));
  }

  @protected
  FfiV2MaybeMixedInputScripts
      sse_decode_box_autoadd_ffi_v_2_maybe_mixed_input_scripts(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_maybe_mixed_input_scripts(deserializer));
  }

  @protected
  FfiV2OutputsUnknown sse_decode_box_autoadd_ffi_v_2_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_outputs_unknown(deserializer));
  }

  @protected
  FfiV2PayjoinProposal sse_decode_box_autoadd_ffi_v_2_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_payjoin_proposal(deserializer));
  }

  @protected
  FfiV2ProvisionalProposal sse_decode_box_autoadd_ffi_v_2_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_provisional_proposal(deserializer));
  }

  @protected
  FfiV2UncheckedProposal sse_decode_box_autoadd_ffi_v_2_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_ffi_v_2_unchecked_proposal(deserializer));
  }

  @protected
  Headers sse_decode_box_autoadd_headers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_headers(deserializer));
  }

  @protected
  OutPoint sse_decode_box_autoadd_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_out_point(deserializer));
  }

  @protected
  TxOut sse_decode_box_autoadd_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_tx_out(deserializer));
  }

  @protected
  BigInt sse_decode_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_64(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  ClientResponse sse_decode_client_response(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse(
            deserializer);
    return ClientResponse(field0: var_field0);
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  FfiActiveSession sse_decode_ffi_active_session(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2ActiveSession(deserializer);
    return FfiActiveSession(field0: var_field0);
  }

  @protected
  FfiContextV1 sse_decode_ffi_context_v_1(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(deserializer);
    return FfiContextV1(field0: var_field0);
  }

  @protected
  FfiContextV2 sse_decode_ffi_context_v_2(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(deserializer);
    return FfiContextV2(field0: var_field0);
  }

  @protected
  FfiMaybeInputsOwned sse_decode_ffi_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned(
        deserializer);
    return FfiMaybeInputsOwned(field0: var_field0);
  }

  @protected
  FfiMaybeInputsSeen sse_decode_ffi_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen(deserializer);
    return FfiMaybeInputsSeen(field0: var_field0);
  }

  @protected
  FfiMaybeMixedInputScripts sse_decode_ffi_maybe_mixed_input_scripts(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts(
            deserializer);
    return FfiMaybeMixedInputScripts(field0: var_field0);
  }

  @protected
  FfiOhttpKeys sse_decode_ffi_ohttp_keys(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffitypesOhttpKeys(deserializer);
    return FfiOhttpKeys(field0: var_field0);
  }

  @protected
  FfiOutputsUnknown sse_decode_ffi_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev1OutputsUnknown(deserializer);
    return FfiOutputsUnknown(field0: var_field0);
  }

  @protected
  FfiPayjoinProposal sse_decode_ffi_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev1PayjoinProposal(deserializer);
    return FfiPayjoinProposal(field0: var_field0);
  }

  @protected
  FfiPjUri sse_decode_ffi_pj_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffiuriPjUri(deserializer);
    return FfiPjUri(field0: var_field0);
  }

  @protected
  FfiPjUriBuilder sse_decode_ffi_pj_uri_builder(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_internal =
        sse_decode_RustOpaque_payjoin_ffiuriPjUriBuilder(deserializer);
    return FfiPjUriBuilder(internal: var_internal);
  }

  @protected
  FfiProvisionalProposal sse_decode_ffi_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev1ProvisionalProposal(
            deserializer);
    return FfiProvisionalProposal(field0: var_field0);
  }

  @protected
  FfiRequestBuilder sse_decode_ffi_request_builder(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffisendv1RequestBuilder(deserializer);
    return FfiRequestBuilder(field0: var_field0);
  }

  @protected
  FfiRequestContext sse_decode_ffi_request_context(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffisendv1RequestContext(deserializer);
    return FfiRequestContext(field0: var_field0);
  }

  @protected
  FfiSessionInitializer sse_decode_ffi_session_initializer(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2SessionInitializer(
            deserializer);
    return FfiSessionInitializer(field0: var_field0);
  }

  @protected
  FfiUncheckedProposal sse_decode_ffi_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
            deserializer);
    return FfiUncheckedProposal(field0: var_field0);
  }

  @protected
  FfiUri sse_decode_ffi_uri(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffiuriUri(deserializer);
    return FfiUri(field0: var_field0);
  }

  @protected
  FfiUrl sse_decode_ffi_url(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffiuriUrl(deserializer);
    return FfiUrl(field0: var_field0);
  }

  @protected
  FfiV2MaybeInputsOwned sse_decode_ffi_v_2_maybe_inputs_owned(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned(
            deserializer);
    return FfiV2MaybeInputsOwned(field0: var_field0);
  }

  @protected
  FfiV2MaybeInputsSeen sse_decode_ffi_v_2_maybe_inputs_seen(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen(
            deserializer);
    return FfiV2MaybeInputsSeen(field0: var_field0);
  }

  @protected
  FfiV2MaybeMixedInputScripts sse_decode_ffi_v_2_maybe_mixed_input_scripts(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts(
            deserializer);
    return FfiV2MaybeMixedInputScripts(field0: var_field0);
  }

  @protected
  FfiV2OutputsUnknown sse_decode_ffi_v_2_outputs_unknown(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown(
        deserializer);
    return FfiV2OutputsUnknown(field0: var_field0);
  }

  @protected
  FfiV2PayjoinProposal sse_decode_ffi_v_2_payjoin_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
            deserializer);
    return FfiV2PayjoinProposal(field0: var_field0);
  }

  @protected
  FfiV2ProvisionalProposal sse_decode_ffi_v_2_provisional_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal(
            deserializer);
    return FfiV2ProvisionalProposal(field0: var_field0);
  }

  @protected
  FfiV2UncheckedProposal sse_decode_ffi_v_2_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
            deserializer);
    return FfiV2UncheckedProposal(field0: var_field0);
  }

  @protected
  Headers sse_decode_headers(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_map = sse_decode_Map_String_String(deserializer);
    return Headers(map: var_map);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<OutPoint> sse_decode_list_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <OutPoint>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_out_point(deserializer));
    }
    return ans_;
  }

  @protected
  Uint64List sse_decode_list_prim_u_64_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint64List(len_);
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, String)> sse_decode_list_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, String)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_string(deserializer));
    }
    return ans_;
  }

  @protected
  List<(BigInt, OutPoint)> sse_decode_list_record_u_64_out_point(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(BigInt, OutPoint)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_u_64_out_point(deserializer));
    }
    return ans_;
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FfiOhttpKeys? sse_decode_opt_box_autoadd_ffi_ohttp_keys(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ffi_ohttp_keys(deserializer));
    } else {
      return null;
    }
  }

  @protected
  FfiV2UncheckedProposal? sse_decode_opt_box_autoadd_ffi_v_2_unchecked_proposal(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_ffi_v_2_unchecked_proposal(deserializer));
    } else {
      return null;
    }
  }

  @protected
  BigInt? sse_decode_opt_box_autoadd_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    return OutPoint(txid: var_txid, vout: var_vout);
  }

  @protected
  PayjoinError sse_decode_payjoin_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_InvalidAddress(message: var_message);
      case 1:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_InvalidScript(message: var_message);
      case 2:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_NetworkValidation(message: var_message);
      case 3:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PsbtParseError(message: var_message);
      case 4:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ResponseError(message: var_message);
      case 5:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_RequestError(message: var_message);
      case 6:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_TransactionError(message: var_message);
      case 7:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ServerError(message: var_message);
      case 8:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_SelectionError(message: var_message);
      case 9:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_CreateRequestError(message: var_message);
      case 10:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PjParseError(message: var_message);
      case 11:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_PjNotSupported(message: var_message);
      case 12:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_ValidationError(message: var_message);
      case 13:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_V2Error(message: var_message);
      case 14:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_UnexpectedError(message: var_message);
      case 15:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_OhttpError(message: var_message);
      case 16:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_UrlError(message: var_message);
      case 17:
        var var_message = sse_decode_String(deserializer);
        return PayjoinError_IoError(message: var_message);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  (Request, ClientResponse) sse_decode_record_request_client_response(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_request(deserializer);
    var var_field1 = sse_decode_client_response(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (Request, FfiContextV1) sse_decode_record_request_ffi_context_v_1(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_request(deserializer);
    var var_field1 = sse_decode_ffi_context_v_1(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (Request, FfiContextV2) sse_decode_record_request_ffi_context_v_2(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_request(deserializer);
    var var_field1 = sse_decode_ffi_context_v_2(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, String) sse_decode_record_string_string(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_String(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (BigInt, OutPoint) sse_decode_record_u_64_out_point(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_u_64(deserializer);
    var var_field1 = sse_decode_out_point(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  Request sse_decode_request(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_url = sse_decode_ffi_url(deserializer);
    var var_body = sse_decode_list_prim_u_8_strict(deserializer);
    return Request(url: var_url, body: var_body);
  }

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_64(deserializer);
    var var_scriptPubkey = sse_decode_list_prim_u_8_strict(deserializer);
    return TxOut(value: var_value, scriptPubkey: var_scriptPubkey);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  PlatformPointer cst_encode_DartFn_Inputs_String_Output_String_AnyhowException(
      FutureOr<String> Function(String) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String_AnyhowException(raw));
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs__Output_list_prim_u_8_strict_AnyhowException(
          FutureOr<Uint8List> Function() raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs__Output_list_prim_u_8_strict_AnyhowException(raw));
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
          FutureOr<bool> Function(Uint8List) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
            raw));
  }

  @protected
  PlatformPointer
      cst_encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
          FutureOr<bool> Function(OutPoint) raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_DartOpaque(
        encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(raw));
  }

  @protected
  PlatformPointer cst_encode_DartOpaque(Object raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return encodeDartOpaque(
        raw, portManager.dartHandlerPort, generalizedFrbRustBinding);
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
      ArcV2PayjoinProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ArcV2PayjoinProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(ArcContextV1 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ArcContextV1Impl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(ArcContextV2 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ArcContextV2Impl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned(
      MaybeInputsOwned raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MaybeInputsOwnedImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen(
      MaybeInputsSeen raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MaybeInputsSeenImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts(
      MaybeMixedInputScripts raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MaybeMixedInputScriptsImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev1OutputsUnknown(
      OutputsUnknown raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OutputsUnknownImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev1PayjoinProposal(
      PayjoinProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PayjoinProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev1ProvisionalProposal(
      ProvisionalProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ProvisionalProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
      UncheckedProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UncheckedProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2ActiveSession(
      ActiveSession raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as ActiveSessionImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2SessionInitializer(
      SessionInitializer raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as SessionInitializerImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned(
      V2MaybeInputsOwned raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V2MaybeInputsOwnedImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen(
      V2MaybeInputsSeen raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V2MaybeInputsSeenImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts(
      V2MaybeMixedInputScripts raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V2MaybeMixedInputScriptsImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown(
      V2OutputsUnknown raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V2OutputsUnknownImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal(
      V2ProvisionalProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V2ProvisionalProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
      V2UncheckedProposal raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as V2UncheckedProposalImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffisendv1RequestBuilder(
      RequestBuilder raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RequestBuilderImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffisendv1RequestContext(
      RequestContext raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as RequestContextImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffitypesOhttpKeys(OhttpKeys raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as OhttpKeysImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffiuriPjUri(PjUri raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PjUriImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffiuriPjUriBuilder(PjUriBuilder raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as PjUriBuilderImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffiuriUri(Uri raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UriImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_payjoin_ffiuriUrl(Url raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as UrlImpl).frbInternalCstEncode();
  }

  @protected
  int cst_encode_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse(
      MutexOptionClientResponse raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return (raw as MutexOptionClientResponseImpl).frbInternalCstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  double cst_encode_f_64(double raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_network(Network raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_String_Output_String_AnyhowException(
      FutureOr<String> Function(String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_String_Output_String_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs__Output_list_prim_u_8_strict_AnyhowException(
      FutureOr<Uint8List> Function() self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs__Output_list_prim_u_8_strict_AnyhowException(self),
        serializer);
  }

  @protected
  void
      sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
          FutureOr<bool> Function(Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_bool_AnyhowException(
            self),
        serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(
      FutureOr<bool> Function(OutPoint) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_out_point_Output_bool_AnyhowException(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        BigInt.from(PlatformPointerUtil.ptrToInt(encodeDartOpaque(
                self, portManager.dartHandlerPort, generalizedFrbRustBinding)))
            .toUnsigned(64),
        serializer);
  }

  @protected
  void sse_encode_Map_String_String(
      Map<String, String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_string_string(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_Map_u_64_out_point(
      Map<BigInt, OutPoint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_u_64_out_point(
        self.entries.map((e) => (e.key, e.value)).toList(), serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
      ArcV2PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcV2PayjoinProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
      ArcContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcContextV1Impl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
      ArcContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ArcContextV2Impl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned(
      MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MaybeInputsOwnedImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen(
      MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MaybeInputsSeenImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts(
      MaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MaybeMixedInputScriptsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev1OutputsUnknown(
      OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OutputsUnknownImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev1PayjoinProposal(
      PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PayjoinProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev1ProvisionalProposal(
      ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ProvisionalProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
      UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UncheckedProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2ActiveSession(
      ActiveSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as ActiveSessionImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2SessionInitializer(
      SessionInitializer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as SessionInitializerImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned(
      V2MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V2MaybeInputsOwnedImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen(
      V2MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V2MaybeInputsSeenImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts(
      V2MaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V2MaybeMixedInputScriptsImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown(
      V2OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V2OutputsUnknownImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal(
      V2ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V2ProvisionalProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
      V2UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as V2UncheckedProposalImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffisendv1RequestBuilder(
      RequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RequestBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffisendv1RequestContext(
      RequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as RequestContextImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffitypesOhttpKeys(
      OhttpKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as OhttpKeysImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffiuriPjUri(
      PjUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PjUriImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffiuriPjUriBuilder(
      PjUriBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as PjUriBuilderImpl).frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffiuriUri(
      Uri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UriImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_payjoin_ffiuriUrl(
      Url self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as UrlImpl).frbInternalSseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse(
      MutexOptionClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        (self as MutexOptionClientResponseImpl)
            .frbInternalSseEncode(move: null),
        serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_client_response(
      ClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_client_response(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_active_session(
      FfiActiveSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_active_session(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_context_v_1(
      FfiContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_context_v_1(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_context_v_2(
      FfiContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_context_v_2(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_maybe_inputs_owned(
      FfiMaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_maybe_inputs_owned(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_maybe_inputs_seen(
      FfiMaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_maybe_inputs_seen(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_maybe_mixed_input_scripts(
      FfiMaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_maybe_mixed_input_scripts(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_ohttp_keys(
      FfiOhttpKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_ohttp_keys(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_outputs_unknown(
      FfiOutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_outputs_unknown(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_payjoin_proposal(
      FfiPayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_payjoin_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_pj_uri(
      FfiPjUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_pj_uri(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_pj_uri_builder(
      FfiPjUriBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_pj_uri_builder(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_provisional_proposal(
      FfiProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_provisional_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_request_builder(
      FfiRequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_request_builder(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_request_context(
      FfiRequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_request_context(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_session_initializer(
      FfiSessionInitializer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_session_initializer(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_unchecked_proposal(
      FfiUncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_unchecked_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_uri(FfiUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_uri(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_url(FfiUrl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_url(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_maybe_inputs_owned(
      FfiV2MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_maybe_inputs_owned(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_maybe_inputs_seen(
      FfiV2MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_maybe_inputs_seen(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_maybe_mixed_input_scripts(
      FfiV2MaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_maybe_mixed_input_scripts(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_outputs_unknown(
      FfiV2OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_outputs_unknown(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_payjoin_proposal(
      FfiV2PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_payjoin_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_provisional_proposal(
      FfiV2ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_provisional_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_ffi_v_2_unchecked_proposal(
      FfiV2UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_v_2_unchecked_proposal(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_headers(Headers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_headers(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_out_point(
      OutPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_out_point(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_tx_out(TxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_tx_out(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_client_response(
      ClientResponse self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_stdsyncMutexcoreoptionOptionohttpClientResponse(
        self.field0, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_ffi_active_session(
      FfiActiveSession self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2ActiveSession(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_context_v_1(FfiContextV1 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendv1ContextV1(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_context_v_2(FfiContextV2 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffisendv2ContextV2(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_maybe_inputs_owned(
      FfiMaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev1MaybeInputsOwned(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_maybe_inputs_seen(
      FfiMaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev1MaybeInputsSeen(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_maybe_mixed_input_scripts(
      FfiMaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev1MaybeMixedInputScripts(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_ohttp_keys(FfiOhttpKeys self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffitypesOhttpKeys(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_outputs_unknown(
      FfiOutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev1OutputsUnknown(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_payjoin_proposal(
      FfiPayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev1PayjoinProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_pj_uri(FfiPjUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffiuriPjUri(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_pj_uri_builder(
      FfiPjUriBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffiuriPjUriBuilder(self.internal, serializer);
  }

  @protected
  void sse_encode_ffi_provisional_proposal(
      FfiProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev1ProvisionalProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_request_builder(
      FfiRequestBuilder self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffisendv1RequestBuilder(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_request_context(
      FfiRequestContext self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffisendv1RequestContext(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_session_initializer(
      FfiSessionInitializer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2SessionInitializer(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_unchecked_proposal(
      FfiUncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev1UncheckedProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_uri(FfiUri self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffiuriUri(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_url(FfiUrl self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffiuriUrl(self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_maybe_inputs_owned(
      FfiV2MaybeInputsOwned self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsOwned(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_maybe_inputs_seen(
      FfiV2MaybeInputsSeen self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2V2MaybeInputsSeen(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_maybe_mixed_input_scripts(
      FfiV2MaybeMixedInputScripts self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2V2MaybeMixedInputScripts(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_outputs_unknown(
      FfiV2OutputsUnknown self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2V2OutputsUnknown(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_payjoin_proposal(
      FfiV2PayjoinProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_Arcpayjoin_ffireceivev2V2PayjoinProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_provisional_proposal(
      FfiV2ProvisionalProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2V2ProvisionalProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_ffi_v_2_unchecked_proposal(
      FfiV2UncheckedProposal self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_RustOpaque_payjoin_ffireceivev2V2UncheckedProposal(
        self.field0, serializer);
  }

  @protected
  void sse_encode_headers(Headers self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Map_String_String(self.map, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_out_point(
      List<OutPoint> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_out_point(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_64_strict(
      Uint64List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint64List(self);
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_string(
      List<(String, String)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_string(item, serializer);
    }
  }

  @protected
  void sse_encode_list_record_u_64_out_point(
      List<(BigInt, OutPoint)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_u_64_out_point(item, serializer);
    }
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ffi_ohttp_keys(
      FfiOhttpKeys? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ffi_ohttp_keys(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_ffi_v_2_unchecked_proposal(
      FfiV2UncheckedProposal? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_ffi_v_2_unchecked_proposal(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_64(BigInt? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
  }

  @protected
  void sse_encode_payjoin_error(PayjoinError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case PayjoinError_InvalidAddress(message: final message):
        sse_encode_i_32(0, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_InvalidScript(message: final message):
        sse_encode_i_32(1, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_NetworkValidation(message: final message):
        sse_encode_i_32(2, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PsbtParseError(message: final message):
        sse_encode_i_32(3, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ResponseError(message: final message):
        sse_encode_i_32(4, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_RequestError(message: final message):
        sse_encode_i_32(5, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_TransactionError(message: final message):
        sse_encode_i_32(6, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ServerError(message: final message):
        sse_encode_i_32(7, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_SelectionError(message: final message):
        sse_encode_i_32(8, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_CreateRequestError(message: final message):
        sse_encode_i_32(9, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PjParseError(message: final message):
        sse_encode_i_32(10, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_PjNotSupported(message: final message):
        sse_encode_i_32(11, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_ValidationError(message: final message):
        sse_encode_i_32(12, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_V2Error(message: final message):
        sse_encode_i_32(13, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_UnexpectedError(message: final message):
        sse_encode_i_32(14, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_OhttpError(message: final message):
        sse_encode_i_32(15, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_UrlError(message: final message):
        sse_encode_i_32(16, serializer);
        sse_encode_String(message, serializer);
      case PayjoinError_IoError(message: final message):
        sse_encode_i_32(17, serializer);
        sse_encode_String(message, serializer);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  void sse_encode_record_request_client_response(
      (Request, ClientResponse) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request(self.$1, serializer);
    sse_encode_client_response(self.$2, serializer);
  }

  @protected
  void sse_encode_record_request_ffi_context_v_1(
      (Request, FfiContextV1) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request(self.$1, serializer);
    sse_encode_ffi_context_v_1(self.$2, serializer);
  }

  @protected
  void sse_encode_record_request_ffi_context_v_2(
      (Request, FfiContextV2) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_request(self.$1, serializer);
    sse_encode_ffi_context_v_2(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_string(
      (String, String) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_String(self.$2, serializer);
  }

  @protected
  void sse_encode_record_u_64_out_point(
      (BigInt, OutPoint) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.$1, serializer);
    sse_encode_out_point(self.$2, serializer);
  }

  @protected
  void sse_encode_request(Request self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_ffi_url(self.url, serializer);
    sse_encode_list_prim_u_8_strict(self.body, serializer);
  }

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.value, serializer);
    sse_encode_list_prim_u_8_strict(self.scriptPubkey, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ActiveSessionImpl extends RustOpaque implements ActiveSession {
  // Not to be used by end users
  ActiveSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ActiveSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ActiveSession,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ActiveSession,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_ActiveSessionPtr,
  );
}

@sealed
class ArcContextV1Impl extends RustOpaque implements ArcContextV1 {
  // Not to be used by end users
  ArcContextV1Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcContextV1Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ArcContextV1,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ArcContextV1,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_ArcContextV1Ptr,
  );
}

@sealed
class ArcContextV2Impl extends RustOpaque implements ArcContextV2 {
  // Not to be used by end users
  ArcContextV2Impl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcContextV2Impl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ArcContextV2,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ArcContextV2,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_ArcContextV2Ptr,
  );
}

@sealed
class ArcV2PayjoinProposalImpl extends RustOpaque
    implements ArcV2PayjoinProposal {
  // Not to be used by end users
  ArcV2PayjoinProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcV2PayjoinProposalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ArcV2PayjoinProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ArcV2PayjoinProposal,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_ArcV2PayjoinProposalPtr,
  );
}

@sealed
class MaybeInputsOwnedImpl extends RustOpaque implements MaybeInputsOwned {
  // Not to be used by end users
  MaybeInputsOwnedImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MaybeInputsOwnedImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_MaybeInputsOwned,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_MaybeInputsOwned,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_MaybeInputsOwnedPtr,
  );
}

@sealed
class MaybeInputsSeenImpl extends RustOpaque implements MaybeInputsSeen {
  // Not to be used by end users
  MaybeInputsSeenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MaybeInputsSeenImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_MaybeInputsSeen,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_MaybeInputsSeen,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_MaybeInputsSeenPtr,
  );
}

@sealed
class MaybeMixedInputScriptsImpl extends RustOpaque
    implements MaybeMixedInputScripts {
  // Not to be used by end users
  MaybeMixedInputScriptsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MaybeMixedInputScriptsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: core
        .instance.api.rust_arc_increment_strong_count_MaybeMixedInputScripts,
    rustArcDecrementStrongCount: core
        .instance.api.rust_arc_decrement_strong_count_MaybeMixedInputScripts,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_MaybeMixedInputScriptsPtr,
  );
}

@sealed
class MutexOptionClientResponseImpl extends RustOpaque
    implements MutexOptionClientResponse {
  // Not to be used by end users
  MutexOptionClientResponseImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MutexOptionClientResponseImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: core
        .instance.api.rust_arc_increment_strong_count_MutexOptionClientResponse,
    rustArcDecrementStrongCount: core
        .instance.api.rust_arc_decrement_strong_count_MutexOptionClientResponse,
    rustArcDecrementStrongCountPtr: core.instance.api
        .rust_arc_decrement_strong_count_MutexOptionClientResponsePtr,
  );
}

@sealed
class OhttpKeysImpl extends RustOpaque implements OhttpKeys {
  // Not to be used by end users
  OhttpKeysImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OhttpKeysImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_OhttpKeys,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_OhttpKeys,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_OhttpKeysPtr,
  );
}

@sealed
class OutputsUnknownImpl extends RustOpaque implements OutputsUnknown {
  // Not to be used by end users
  OutputsUnknownImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  OutputsUnknownImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_OutputsUnknown,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_OutputsUnknown,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_OutputsUnknownPtr,
  );
}

@sealed
class PayjoinProposalImpl extends RustOpaque implements PayjoinProposal {
  // Not to be used by end users
  PayjoinProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PayjoinProposalImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_PayjoinProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_PayjoinProposal,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_PayjoinProposalPtr,
  );
}

@sealed
class PjUriBuilderImpl extends RustOpaque implements PjUriBuilder {
  // Not to be used by end users
  PjUriBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PjUriBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_PjUriBuilder,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_PjUriBuilder,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_PjUriBuilderPtr,
  );
}

@sealed
class PjUriImpl extends RustOpaque implements PjUri {
  // Not to be used by end users
  PjUriImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PjUriImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_PjUri,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_PjUri,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_PjUriPtr,
  );
}

@sealed
class ProvisionalProposalImpl extends RustOpaque
    implements ProvisionalProposal {
  // Not to be used by end users
  ProvisionalProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ProvisionalProposalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_ProvisionalProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_ProvisionalProposal,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_ProvisionalProposalPtr,
  );
}

@sealed
class RequestBuilderImpl extends RustOpaque implements RequestBuilder {
  // Not to be used by end users
  RequestBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RequestBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_RequestBuilder,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_RequestBuilder,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_RequestBuilderPtr,
  );
}

@sealed
class RequestContextImpl extends RustOpaque implements RequestContext {
  // Not to be used by end users
  RequestContextImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RequestContextImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_RequestContext,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_RequestContext,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_RequestContextPtr,
  );
}

@sealed
class SessionInitializerImpl extends RustOpaque implements SessionInitializer {
  // Not to be used by end users
  SessionInitializerImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SessionInitializerImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_SessionInitializer,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_SessionInitializer,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_SessionInitializerPtr,
  );
}

@sealed
class UncheckedProposalImpl extends RustOpaque implements UncheckedProposal {
  // Not to be used by end users
  UncheckedProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UncheckedProposalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_UncheckedProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_UncheckedProposal,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_UncheckedProposalPtr,
  );
}

@sealed
class UriImpl extends RustOpaque implements Uri {
  // Not to be used by end users
  UriImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UriImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_Uri,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_Uri,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_UriPtr,
  );
}

@sealed
class UrlImpl extends RustOpaque implements Url {
  // Not to be used by end users
  UrlImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  UrlImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_Url,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_Url,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_UrlPtr,
  );
}

@sealed
class V2MaybeInputsOwnedImpl extends RustOpaque implements V2MaybeInputsOwned {
  // Not to be used by end users
  V2MaybeInputsOwnedImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V2MaybeInputsOwnedImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_V2MaybeInputsOwned,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_V2MaybeInputsOwned,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_V2MaybeInputsOwnedPtr,
  );
}

@sealed
class V2MaybeInputsSeenImpl extends RustOpaque implements V2MaybeInputsSeen {
  // Not to be used by end users
  V2MaybeInputsSeenImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V2MaybeInputsSeenImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_V2MaybeInputsSeen,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_V2MaybeInputsSeen,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_V2MaybeInputsSeenPtr,
  );
}

@sealed
class V2MaybeMixedInputScriptsImpl extends RustOpaque
    implements V2MaybeMixedInputScripts {
  // Not to be used by end users
  V2MaybeMixedInputScriptsImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V2MaybeMixedInputScriptsImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: core
        .instance.api.rust_arc_increment_strong_count_V2MaybeMixedInputScripts,
    rustArcDecrementStrongCount: core
        .instance.api.rust_arc_decrement_strong_count_V2MaybeMixedInputScripts,
    rustArcDecrementStrongCountPtr: core.instance.api
        .rust_arc_decrement_strong_count_V2MaybeMixedInputScriptsPtr,
  );
}

@sealed
class V2OutputsUnknownImpl extends RustOpaque implements V2OutputsUnknown {
  // Not to be used by end users
  V2OutputsUnknownImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V2OutputsUnknownImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_V2OutputsUnknown,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_V2OutputsUnknown,
    rustArcDecrementStrongCountPtr:
        core.instance.api.rust_arc_decrement_strong_count_V2OutputsUnknownPtr,
  );
}

@sealed
class V2ProvisionalProposalImpl extends RustOpaque
    implements V2ProvisionalProposal {
  // Not to be used by end users
  V2ProvisionalProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V2ProvisionalProposalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_V2ProvisionalProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_V2ProvisionalProposal,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_V2ProvisionalProposalPtr,
  );
}

@sealed
class V2UncheckedProposalImpl extends RustOpaque
    implements V2UncheckedProposal {
  // Not to be used by end users
  V2UncheckedProposalImpl.frbInternalDcoDecode(List<dynamic> wire)
      : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  V2UncheckedProposalImpl.frbInternalSseDecode(
      BigInt ptr, int externalSizeOnNative)
      : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        core.instance.api.rust_arc_increment_strong_count_V2UncheckedProposal,
    rustArcDecrementStrongCount:
        core.instance.api.rust_arc_decrement_strong_count_V2UncheckedProposal,
    rustArcDecrementStrongCountPtr: core
        .instance.api.rust_arc_decrement_strong_count_V2UncheckedProposalPtr,
  );
}
